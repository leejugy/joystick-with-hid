
joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08009000  08009000  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090bc  080090bc  0000b160  2**0
                  CONTENTS
  4 .ARM          00000008  080090bc  080090bc  0000a0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c4  080090c4  0000b160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c4  080090c4  0000a0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090c8  080090c8  0000a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  080090cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ccc  20000160  0800922c  0000b160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e2c  0800922c  0000be2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013479  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003680  00000000  00000000  0001e609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00021c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6a  00000000  00000000  00022bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7af  00000000  00000000  0002372a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a5b  00000000  00000000  0003ded9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b5f  00000000  00000000  00054934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea493  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b4  00000000  00000000  000ea4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000ee68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008fe8 	.word	0x08008fe8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08008fe8 	.word	0x08008fe8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_ADC1_Init+0xd0>)
 8000584:	4a2f      	ldr	r2, [pc, #188]	@ (8000644 <MX_ADC1_Init+0xd4>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_ADC1_Init+0xd0>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b2b      	ldr	r3, [pc, #172]	@ (8000640 <MX_ADC1_Init+0xd0>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_ADC1_Init+0xd0>)
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059c:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_ADC1_Init+0xd0>)
 800059e:	2201      	movs	r2, #1
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005b2:	4a25      	ldr	r2, [pc, #148]	@ (8000648 <MX_ADC1_Init+0xd8>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005be:	2203      	movs	r2, #3
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	481b      	ldr	r0, [pc, #108]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005d2:	f000 fccd 	bl	8000f70 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fa9e 	bl	8000b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80005e8:	2304      	movs	r3, #4
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4813      	ldr	r0, [pc, #76]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005f2:	f000 fe0f 	bl	8001214 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fa8e 	bl	8000b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000600:	2309      	movs	r3, #9
 8000602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	@ (8000640 <MX_ADC1_Init+0xd0>)
 800060e:	f000 fe01 	bl	8001214 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000618:	f000 fa80 	bl	8000b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800061c:	2307      	movs	r3, #7
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000620:	2303      	movs	r3, #3
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_ADC1_Init+0xd0>)
 800062a:	f000 fdf3 	bl	8001214 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000634:	f000 fa72 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000017c 	.word	0x2000017c
 8000644:	40012000 	.word	0x40012000
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a3c      	ldr	r2, [pc, #240]	@ (800075c <HAL_ADC_MspInit+0x110>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d171      	bne.n	8000752 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b3b      	ldr	r3, [pc, #236]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	4a3a      	ldr	r2, [pc, #232]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800067c:	6453      	str	r3, [r2, #68]	@ 0x44
 800067e:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a33      	ldr	r2, [pc, #204]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006c2:	2380      	movs	r3, #128	@ 0x80
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4823      	ldr	r0, [pc, #140]	@ (8000764 <HAL_ADC_MspInit+0x118>)
 80006d6:	f001 fccf 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006da:	2303      	movs	r3, #3
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <HAL_ADC_MspInit+0x11c>)
 80006ee:	f001 fcc3 	bl	8002078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <HAL_ADC_MspInit+0x120>)
 80006f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <HAL_ADC_MspInit+0x124>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <HAL_ADC_MspInit+0x120>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800070c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000714:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000718:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000728:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000738:	f001 f92e 	bl	8001998 <HAL_DMA_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000742:	f000 f9eb 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800074a:	639a      	str	r2, [r3, #56]	@ 0x38
 800074c:	4a07      	ldr	r2, [pc, #28]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	@ 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40012000 	.word	0x40012000
 8000760:	40023800 	.word	0x40023800
 8000764:	40020000 	.word	0x40020000
 8000768:	40020400 	.word	0x40020400
 800076c:	200001c4 	.word	0x200001c4
 8000770:	40026410 	.word	0x40026410

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_DMA_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <MX_DMA_Init+0x4c>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <MX_DMA_Init+0x4c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2038      	movs	r0, #56	@ 0x38
 800079c:	f001 f8c5 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a0:	2038      	movs	r0, #56	@ 0x38
 80007a2:	f001 f8de 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	203a      	movs	r0, #58	@ 0x3a
 80007ac:	f001 f8bd 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007b0:	203a      	movs	r0, #58	@ 0x3a
 80007b2:	f001 f8d6 	bl	8001962 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_GPIO_Init+0xb8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a26      	ldr	r2, [pc, #152]	@ (800087c <MX_GPIO_Init+0xb8>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_GPIO_Init+0xb8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b20      	ldr	r3, [pc, #128]	@ (800087c <MX_GPIO_Init+0xb8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a1f      	ldr	r2, [pc, #124]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a18      	ldr	r2, [pc, #96]	@ (800087c <MX_GPIO_Init+0xb8>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a11      	ldr	r2, [pc, #68]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <MX_GPIO_Init+0xbc>)
 8000852:	f001 fd95 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000856:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_GPIO_Init+0xbc>)
 8000870:	f001 fc02 	bl	8002078 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	@ 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020800 	.word	0x40020800

08000884 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <HAL_UART_RxCpltCallback+0x2c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d107      	bne.n	80008a8 <HAL_UART_RxCpltCallback+0x24>
		uart_rx_flag = true;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_UART_RxCpltCallback+0x30>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, &uart_rx_data, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	4905      	ldr	r1, [pc, #20]	@ (80008b8 <HAL_UART_RxCpltCallback+0x34>)
 80008a2:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <HAL_UART_RxCpltCallback+0x2c>)
 80008a4:	f003 fd0b 	bl	80042be <HAL_UART_Receive_DMA>
	}
  UNUSED(huart);
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000260 	.word	0x20000260
 80008b4:	20000225 	.word	0x20000225
 80008b8:	20000224 	.word	0x20000224

080008bc <TX>:

void TX(TX_Type tx_type, char *fmt,...){
 80008bc:	b40e      	push	{r1, r2, r3}
 80008be:	b580      	push	{r7, lr}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)&tx_buffer[0],32,fmt,arg);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	69fa      	ldr	r2, [r7, #28]
 80008d2:	2120      	movs	r1, #32
 80008d4:	480b      	ldr	r0, [pc, #44]	@ (8000904 <TX+0x48>)
 80008d6:	f007 fef9 	bl	80086cc <vsniprintf>
#ifdef USE_UART1
	if(tx_type==UART1){
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d105      	bne.n	80008ec <TX+0x30>
		HAL_UART_Transmit(&huart1,tx_buffer,32,10);
 80008e0:	230a      	movs	r3, #10
 80008e2:	2220      	movs	r2, #32
 80008e4:	4907      	ldr	r1, [pc, #28]	@ (8000904 <TX+0x48>)
 80008e6:	4808      	ldr	r0, [pc, #32]	@ (8000908 <TX+0x4c>)
 80008e8:	f003 fc5e 	bl	80041a8 <HAL_UART_Transmit>
	else if(tx_type==CDC){
		CDC_Transmit_FS(tx_buffer,32);
	}
#endif
	va_end(arg);
	memset(tx_buffer,0,32);
 80008ec:	2220      	movs	r2, #32
 80008ee:	2100      	movs	r1, #0
 80008f0:	4804      	ldr	r0, [pc, #16]	@ (8000904 <TX+0x48>)
 80008f2:	f007 fef9 	bl	80086e8 <memset>
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000900:	b003      	add	sp, #12
 8000902:	4770      	bx	lr
 8000904:	2000023c 	.word	0x2000023c
 8000908:	20000260 	.word	0x20000260

0800090c <read_joystick_dma>:

void read_joystick_dma(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	//x
	if(ADC_VAL[0]>=3000){
 8000910:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <read_joystick_dma+0xac>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000918:	4293      	cmp	r3, r2
 800091a:	d907      	bls.n	800092c <read_joystick_dma+0x20>
		TX(UART1,"<-\n");
 800091c:	4927      	ldr	r1, [pc, #156]	@ (80009bc <read_joystick_dma+0xb0>)
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ffcc 	bl	80008bc <TX>
		buffer[2] = 0x50;
 8000924:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <read_joystick_dma+0xb4>)
 8000926:	2250      	movs	r2, #80	@ 0x50
 8000928:	709a      	strb	r2, [r3, #2]
 800092a:	e00b      	b.n	8000944 <read_joystick_dma+0x38>
	}
	else if(ADC_VAL[0]<=500){
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <read_joystick_dma+0xac>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000934:	d806      	bhi.n	8000944 <read_joystick_dma+0x38>
		TX(UART1,"->\n");
 8000936:	4923      	ldr	r1, [pc, #140]	@ (80009c4 <read_joystick_dma+0xb8>)
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ffbf 	bl	80008bc <TX>
		buffer[2] = 0x4F;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <read_joystick_dma+0xb4>)
 8000940:	224f      	movs	r2, #79	@ 0x4f
 8000942:	709a      	strb	r2, [r3, #2]
	}

	//y
	if(ADC_VAL[1]>=3000){
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <read_joystick_dma+0xac>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800094c:	4293      	cmp	r3, r2
 800094e:	d907      	bls.n	8000960 <read_joystick_dma+0x54>
		TX(UART1,"^\n");
 8000950:	491d      	ldr	r1, [pc, #116]	@ (80009c8 <read_joystick_dma+0xbc>)
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff ffb2 	bl	80008bc <TX>
		buffer[2] = 0x52;
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <read_joystick_dma+0xb4>)
 800095a:	2252      	movs	r2, #82	@ 0x52
 800095c:	709a      	strb	r2, [r3, #2]
 800095e:	e00b      	b.n	8000978 <read_joystick_dma+0x6c>
	}
	else if(ADC_VAL[1]<=500){
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <read_joystick_dma+0xac>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000968:	d806      	bhi.n	8000978 <read_joystick_dma+0x6c>
		TX(UART1,"v\n");
 800096a:	4918      	ldr	r1, [pc, #96]	@ (80009cc <read_joystick_dma+0xc0>)
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff ffa5 	bl	80008bc <TX>
		buffer[2] = 0x51;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <read_joystick_dma+0xb4>)
 8000974:	2251      	movs	r2, #81	@ 0x51
 8000976:	709a      	strb	r2, [r3, #2]
	}

	if(ADC_VAL[2]<=500){
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <read_joystick_dma+0xac>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000980:	d809      	bhi.n	8000996 <read_joystick_dma+0x8a>
		TX(UART1,"Switch click!\n");
 8000982:	4913      	ldr	r1, [pc, #76]	@ (80009d0 <read_joystick_dma+0xc4>)
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff ff99 	bl	80008bc <TX>
		buffer[0] = 0x02;
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <read_joystick_dma+0xb4>)
 800098c:	2202      	movs	r2, #2
 800098e:	701a      	strb	r2, [r3, #0]
		buffer[2] = 0x04;
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <read_joystick_dma+0xb4>)
 8000992:	2204      	movs	r2, #4
 8000994:	709a      	strb	r2, [r3, #2]
	}
	USBD_HID_SendReport(&hUsbDeviceFS, buffer, 8);
 8000996:	2208      	movs	r2, #8
 8000998:	4909      	ldr	r1, [pc, #36]	@ (80009c0 <read_joystick_dma+0xb4>)
 800099a:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <read_joystick_dma+0xc8>)
 800099c:	f005 febe 	bl	800671c <USBD_HID_SendReport>
	memset(buffer,0,8);
 80009a0:	2208      	movs	r2, #8
 80009a2:	2100      	movs	r1, #0
 80009a4:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <read_joystick_dma+0xb4>)
 80009a6:	f007 fe9f 	bl	80086e8 <memset>
	USBD_HID_SendReport(&hUsbDeviceFS, buffer, 8);
 80009aa:	2208      	movs	r2, #8
 80009ac:	4904      	ldr	r1, [pc, #16]	@ (80009c0 <read_joystick_dma+0xb4>)
 80009ae:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <read_joystick_dma+0xc8>)
 80009b0:	f005 feb4 	bl	800671c <USBD_HID_SendReport>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000228 	.word	0x20000228
 80009bc:	08009000 	.word	0x08009000
 80009c0:	20000234 	.word	0x20000234
 80009c4:	08009004 	.word	0x08009004
 80009c8:	08009008 	.word	0x08009008
 80009cc:	0800900c 	.word	0x0800900c
 80009d0:	08009010 	.word	0x08009010
 80009d4:	20000310 	.word	0x20000310

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fa31 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f833 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f7ff feed 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ea:	f7ff fec3 	bl	8000774 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80009ee:	f000 f959 	bl	8000ca4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80009f2:	f007 fa11 	bl	8007e18 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80009f6:	f7ff fdbb 	bl	8000570 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t pretime=HAL_GetTick();
 80009fa:	f000 fa89 	bl	8000f10 <HAL_GetTick>
 80009fe:	6078      	str	r0, [r7, #4]

  UART_Start_Receive_DMA(&huart1, &uart_rx_data, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <main+0x60>)
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <main+0x64>)
 8000a06:	f003 fdf7 	bl	80045f8 <UART_Start_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1,&ADC_VAL[0], 3);
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	490c      	ldr	r1, [pc, #48]	@ (8000a40 <main+0x68>)
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <main+0x6c>)
 8000a10:	f000 faf2 	bl	8000ff8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(HAL_GetTick()-pretime>100){
 8000a14:	f000 fa7c 	bl	8000f10 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b64      	cmp	r3, #100	@ 0x64
 8000a20:	d9f8      	bls.n	8000a14 <main+0x3c>
  		PC13_Toggle;
 8000a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a26:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <main+0x70>)
 8000a28:	f001 fcc3 	bl	80023b2 <HAL_GPIO_TogglePin>
  		pretime = HAL_GetTick();
 8000a2c:	f000 fa70 	bl	8000f10 <HAL_GetTick>
 8000a30:	6078      	str	r0, [r7, #4]
  		read_joystick_dma();
 8000a32:	f7ff ff6b 	bl	800090c <read_joystick_dma>
  	if(HAL_GetTick()-pretime>100){
 8000a36:	e7ed      	b.n	8000a14 <main+0x3c>
 8000a38:	20000224 	.word	0x20000224
 8000a3c:	20000260 	.word	0x20000260
 8000a40:	20000228 	.word	0x20000228
 8000a44:	2000017c 	.word	0x2000017c
 8000a48:	40020800 	.word	0x40020800

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	@ 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2230      	movs	r2, #48	@ 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f007 fe44 	bl	80086e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <SystemClock_Config+0xc8>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a26      	ldr	r2, [pc, #152]	@ (8000b14 <SystemClock_Config+0xc8>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <SystemClock_Config+0xc8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000abc:	2319      	movs	r3, #25
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ac0:	23c0      	movs	r3, #192	@ 0xc0
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fec1 	bl	8003858 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000adc:	f000 f81e 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2103      	movs	r1, #3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 f923 	bl	8003d48 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b08:	f000 f808 	bl	8000b1c <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3750      	adds	r7, #80	@ 0x50
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f98b 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <DMA2_Stream0_IRQHandler+0x10>)
 8000bde:	f000 ffe1 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001c4 	.word	0x200001c4

08000bec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <DMA2_Stream2_IRQHandler+0x10>)
 8000bf2:	f000 ffd7 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200002a8 	.word	0x200002a8

08000c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <OTG_FS_IRQHandler+0x10>)
 8000c06:	f001 fd32 	bl	800266e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200007ec 	.word	0x200007ec

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f007 fd58 	bl	80086f8 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	2000025c 	.word	0x2000025c
 8000c7c:	20000e30 	.word	0x20000e30

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <MX_USART1_UART_Init+0x50>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	f003 fa14 	bl	8004108 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ce6:	f7ff ff19 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000260 	.word	0x20000260
 8000cf4:	40011000 	.word	0x40011000

08000cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a31      	ldr	r2, [pc, #196]	@ (8000ddc <HAL_UART_MspInit+0xe4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d15b      	bne.n	8000dd2 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a2f      	ldr	r2, [pc, #188]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a28      	ldr	r2, [pc, #160]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d64:	2307      	movs	r3, #7
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481d      	ldr	r0, [pc, #116]	@ (8000de4 <HAL_UART_MspInit+0xec>)
 8000d70:	f001 f982 	bl	8002078 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d76:	4a1d      	ldr	r2, [pc, #116]	@ (8000dec <HAL_UART_MspInit+0xf4>)
 8000d78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d88:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d94:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000da4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db0:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000db6:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000db8:	f000 fdee 	bl	8001998 <HAL_DMA_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000dc2:	f7ff feab 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	200002a8 	.word	0x200002a8
 8000dec:	40026440 	.word	0x40026440

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df4:	f7ff ff44 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	@ (8000e3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f007 fc71 	bl	8008704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fdd9 	bl	80009d8 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000e34:	080090cc 	.word	0x080090cc
  ldr r2, =_sbss
 8000e38:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000e3c:	20000e2c 	.word	0x20000e2c

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 fd51 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fe56 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fd69 	bl	800197e <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 fd31 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000308 	.word	0x20000308

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000308 	.word	0x20000308

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e033      	b.n	8000fee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fb5c 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d118      	bne.n	8000fe0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fb6:	f023 0302 	bic.w	r3, r3, #2
 8000fba:	f043 0202 	orr.w	r2, r3, #2
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fa58 	bl	8001478 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f023 0303 	bic.w	r3, r3, #3
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fde:	e001      	b.n	8000fe4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Start_DMA+0x1e>
 8001012:	2302      	movs	r3, #2
 8001014:	e0ce      	b.n	80011b4 <HAL_ADC_Start_DMA+0x1bc>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b01      	cmp	r3, #1
 800102a:	d018      	beq.n	800105e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800103c:	4b5f      	ldr	r3, [pc, #380]	@ (80011bc <HAL_ADC_Start_DMA+0x1c4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a5f      	ldr	r2, [pc, #380]	@ (80011c0 <HAL_ADC_Start_DMA+0x1c8>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0c9a      	lsrs	r2, r3, #18
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001050:	e002      	b.n	8001058 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	3b01      	subs	r3, #1
 8001056:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f9      	bne.n	8001052 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800106c:	d107      	bne.n	800107e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800107c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b01      	cmp	r3, #1
 800108a:	f040 8086 	bne.w	800119a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010cc:	d106      	bne.n	80010dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f023 0206 	bic.w	r2, r3, #6
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80010da:	e002      	b.n	80010e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ea:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <HAL_ADC_Start_DMA+0x1cc>)
 80010ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f2:	4a35      	ldr	r2, [pc, #212]	@ (80011c8 <HAL_ADC_Start_DMA+0x1d0>)
 80010f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010fa:	4a34      	ldr	r2, [pc, #208]	@ (80011cc <HAL_ADC_Start_DMA+0x1d4>)
 80010fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001102:	4a33      	ldr	r2, [pc, #204]	@ (80011d0 <HAL_ADC_Start_DMA+0x1d8>)
 8001104:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800110e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800111e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800112e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	334c      	adds	r3, #76	@ 0x4c
 800113a:	4619      	mov	r1, r3
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f000 fcd8 	bl	8001af4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10f      	bne.n	8001170 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d129      	bne.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	e020      	b.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <HAL_ADC_Start_DMA+0x1dc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d11b      	bne.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d114      	bne.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	e00b      	b.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f043 0210 	orr.w	r2, r3, #16
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	431bde83 	.word	0x431bde83
 80011c4:	40012300 	.word	0x40012300
 80011c8:	08001671 	.word	0x08001671
 80011cc:	0800172b 	.word	0x0800172b
 80011d0:	08001747 	.word	0x08001747
 80011d4:	40012000 	.word	0x40012000

080011d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1c>
 800122c:	2302      	movs	r3, #2
 800122e:	e113      	b.n	8001458 <HAL_ADC_ConfigChannel+0x244>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d925      	bls.n	800128c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68d9      	ldr	r1, [r3, #12]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3b1e      	subs	r3, #30
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43da      	mvns	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	400a      	ands	r2, r1
 8001264:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68d9      	ldr	r1, [r3, #12]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	4603      	mov	r3, r0
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4403      	add	r3, r0
 800127e:	3b1e      	subs	r3, #30
 8001280:	409a      	lsls	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	e022      	b.n	80012d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	2207      	movs	r2, #7
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6919      	ldr	r1, [r3, #16]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4403      	add	r3, r0
 80012c8:	409a      	lsls	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d824      	bhi.n	8001324 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3b05      	subs	r3, #5
 80012ec:	221f      	movs	r2, #31
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	400a      	ands	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	3b05      	subs	r3, #5
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	@ 0x34
 8001322:	e04c      	b.n	80013be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	d824      	bhi.n	8001376 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3b23      	subs	r3, #35	@ 0x23
 800133e:	221f      	movs	r2, #31
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43da      	mvns	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	400a      	ands	r2, r1
 800134c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3b23      	subs	r3, #35	@ 0x23
 8001368:	fa00 f203 	lsl.w	r2, r0, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
 8001374:	e023      	b.n	80013be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	3b41      	subs	r3, #65	@ 0x41
 8001388:	221f      	movs	r2, #31
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	3b41      	subs	r3, #65	@ 0x41
 80013b2:	fa00 f203 	lsl.w	r2, r0, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013be:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <HAL_ADC_ConfigChannel+0x250>)
 80013c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a28      	ldr	r2, [pc, #160]	@ (8001468 <HAL_ADC_ConfigChannel+0x254>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d10f      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b12      	cmp	r3, #18
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <HAL_ADC_ConfigChannel+0x254>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <HAL_ADC_ConfigChannel+0x258>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d003      	beq.n	8001408 <HAL_ADC_ConfigChannel+0x1f4>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b11      	cmp	r3, #17
 8001406:	d122      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a11      	ldr	r2, [pc, #68]	@ (800146c <HAL_ADC_ConfigChannel+0x258>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d111      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_ADC_ConfigChannel+0x25c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a11      	ldr	r2, [pc, #68]	@ (8001474 <HAL_ADC_ConfigChannel+0x260>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9a      	lsrs	r2, r3, #18
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001440:	e002      	b.n	8001448 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40012300 	.word	0x40012300
 8001468:	40012000 	.word	0x40012000
 800146c:	10000012 	.word	0x10000012
 8001470:	20000000 	.word	0x20000000
 8001474:	431bde83 	.word	0x431bde83

08001478 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001480:	4b79      	ldr	r3, [pc, #484]	@ (8001668 <ADC_Init+0x1f0>)
 8001482:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	431a      	orrs	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	021a      	lsls	r2, r3, #8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6899      	ldr	r1, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150a:	4a58      	ldr	r2, [pc, #352]	@ (800166c <ADC_Init+0x1f4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d022      	beq.n	8001556 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800151e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6899      	ldr	r1, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	e00f      	b.n	8001576 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001574:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0202 	bic.w	r2, r2, #2
 8001584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7e1b      	ldrb	r3, [r3, #24]
 8001590:	005a      	lsls	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01b      	beq.n	80015dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80015c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6859      	ldr	r1, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	3b01      	subs	r3, #1
 80015d0:	035a      	lsls	r2, r3, #13
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	e007      	b.n	80015ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	3b01      	subs	r3, #1
 8001608:	051a      	lsls	r2, r3, #20
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6899      	ldr	r1, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800162e:	025a      	lsls	r2, r3, #9
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6899      	ldr	r1, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	029a      	lsls	r2, r3, #10
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40012300 	.word	0x40012300
 800166c:	0f000001 	.word	0x0f000001

08001670 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001686:	2b00      	cmp	r3, #0
 8001688:	d13c      	bne.n	8001704 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d12b      	bne.n	80016fc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d127      	bne.n	80016fc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d119      	bne.n	80016fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0220 	bic.w	r2, r2, #32
 80016d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fd6b 	bl	80011d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001702:	e00e      	b.n	8001722 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f7ff fd75 	bl	8001200 <HAL_ADC_ErrorCallback>
}
 8001716:	e004      	b.n	8001722 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001736:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fd57 	bl	80011ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001752:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2240      	movs	r2, #64	@ 0x40
 8001758:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f043 0204 	orr.w	r2, r3, #4
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7ff fd4a 	bl	8001200 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	@ (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff3e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fab4 	bl	8000f10 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e099      	b.n	8001ae8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d4:	e00f      	b.n	80019f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d6:	f7ff fa9b 	bl	8000f10 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d908      	bls.n	80019f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e078      	b.n	8001ae8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e8      	bne.n	80019d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_DMA_Init+0x158>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f023 0307 	bic.w	r3, r3, #7
 8001a76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d117      	bne.n	8001aba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00e      	beq.n	8001aba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fa6f 	bl	8001f80 <DMA_CheckFifoParam>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2240      	movs	r2, #64	@ 0x40
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e016      	b.n	8001ae8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa26 	bl	8001f14 <DMA_CalcBaseAndBitshift>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	223f      	movs	r2, #63	@ 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	f010803f 	.word	0xf010803f

08001af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_Start_IT+0x26>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e040      	b.n	8001b9c <HAL_DMA_Start_IT+0xa8>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d12f      	bne.n	8001b8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f9b8 	bl	8001eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4c:	223f      	movs	r2, #63	@ 0x3f
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0216 	orr.w	r2, r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0208 	orr.w	r2, r2, #8
 8001b7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e005      	b.n	8001b9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
 8001b98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	@ (8001dec <HAL_DMA_IRQHandler+0x248>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a8e      	ldr	r2, [pc, #568]	@ (8001df0 <HAL_DMA_IRQHandler+0x24c>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	2208      	movs	r2, #8
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d012      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d012      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	2204      	movs	r2, #4
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	2210      	movs	r2, #16
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d043      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03c      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d018      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d024      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e01f      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e016      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0208 	bic.w	r2, r2, #8
 8001d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d18:	2220      	movs	r2, #32
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 808f 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8087 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d136      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0216 	bic.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x1da>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	223f      	movs	r2, #63	@ 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07e      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
        }
        return;
 8001dba:	e079      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d031      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e02c      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000
 8001df0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e01e      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
 8001e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d032      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d307      	bcc.n	8001e8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f2      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x2cc>
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001eb0:	bf00      	nop
    }
  }
}
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b40      	cmp	r3, #64	@ 0x40
 8001ee4:	d108      	bne.n	8001ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ef6:	e007      	b.n	8001f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3b10      	subs	r3, #16
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <DMA_CalcBaseAndBitshift+0x64>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f2e:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <DMA_CalcBaseAndBitshift+0x68>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d909      	bls.n	8001f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	1d1a      	adds	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f54:	e007      	b.n	8001f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	aaaaaaab 	.word	0xaaaaaaab
 8001f7c:	08009080 	.word	0x08009080

08001f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11f      	bne.n	8001fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d856      	bhi.n	800204e <DMA_CheckFifoParam+0xce>
 8001fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa8 <DMA_CheckFifoParam+0x28>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fcb 	.word	0x08001fcb
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	0800204f 	.word	0x0800204f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d046      	beq.n	8002052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc8:	e043      	b.n	8002052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fd2:	d140      	bne.n	8002056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd8:	e03d      	b.n	8002056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fe2:	d121      	bne.n	8002028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d837      	bhi.n	800205a <DMA_CheckFifoParam+0xda>
 8001fea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <DMA_CheckFifoParam+0x70>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002007 	.word	0x08002007
 8001ff8:	08002001 	.word	0x08002001
 8001ffc:	08002019 	.word	0x08002019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      break;
 8002004:	e030      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d025      	beq.n	800205e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002016:	e022      	b.n	800205e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002020:	d11f      	bne.n	8002062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002026:	e01c      	b.n	8002062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d903      	bls.n	8002036 <DMA_CheckFifoParam+0xb6>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002034:	e018      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
      break;
 800203a:	e015      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      break;
 800204c:	e00b      	b.n	8002066 <DMA_CheckFifoParam+0xe6>
      break;
 800204e:	bf00      	nop
 8002050:	e00a      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
 8002054:	e008      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;   
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002066:	bf00      	nop
    }
  } 
  
  return status; 
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e159      	b.n	8002348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8148 	bne.w	8002342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d130      	bne.n	800212c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 0201 	and.w	r2, r3, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b03      	cmp	r3, #3
 8002136:	d017      	beq.n	8002168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d123      	bne.n	80021bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a2 	beq.w	8002342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b57      	ldr	r3, [pc, #348]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a56      	ldr	r2, [pc, #344]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b54      	ldr	r3, [pc, #336]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a49      	ldr	r2, [pc, #292]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_GPIO_Init+0x202>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a48      	ldr	r2, [pc, #288]	@ (800236c <HAL_GPIO_Init+0x2f4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x1fe>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a47      	ldr	r2, [pc, #284]	@ (8002370 <HAL_GPIO_Init+0x2f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x1fa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a46      	ldr	r2, [pc, #280]	@ (8002374 <HAL_GPIO_Init+0x2fc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x1f6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a45      	ldr	r2, [pc, #276]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x1f2>
 8002266:	2304      	movs	r3, #4
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x204>
 800226a:	2307      	movs	r3, #7
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x204>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x204>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x204>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x204>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228c:	4935      	ldr	r1, [pc, #212]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_GPIO_Init+0x304>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a24      	ldr	r2, [pc, #144]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ee:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002312:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <HAL_GPIO_Init+0x304>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <HAL_GPIO_Init+0x304>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233c:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <HAL_GPIO_Init+0x304>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f aea2 	bls.w	8002094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800239c:	e003      	b.n	80023a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c4:	887a      	ldrh	r2, [r7, #2]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	041a      	lsls	r2, r3, #16
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	400b      	ands	r3, r1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af02      	add	r7, sp, #8
 80023ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e101      	b.n	80025fc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f005 fe36 	bl	8008084 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002426:	d102      	bne.n	800242e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fd91 	bl	8004f5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7c1a      	ldrb	r2, [r3, #16]
 8002440:	f88d 2000 	strb.w	r2, [sp]
 8002444:	3304      	adds	r3, #4
 8002446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002448:	f002 fc70 	bl	8004d2c <USB_CoreInit>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0ce      	b.n	80025fc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fd89 	bl	8004f7c <USB_SetCurrentMode>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0bf      	b.n	80025fc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e04a      	b.n	8002518 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3315      	adds	r3, #21
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3314      	adds	r3, #20
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	b298      	uxth	r0, r3
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	332e      	adds	r3, #46	@ 0x2e
 80024be:	4602      	mov	r2, r0
 80024c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3318      	adds	r3, #24
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	331c      	adds	r3, #28
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3320      	adds	r3, #32
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3324      	adds	r3, #36	@ 0x24
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3301      	adds	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	791b      	ldrb	r3, [r3, #4]
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	429a      	cmp	r2, r3
 8002520:	d3af      	bcc.n	8002482 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e044      	b.n	80025b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	3301      	adds	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	791b      	ldrb	r3, [r3, #4]
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3b5      	bcc.n	8002528 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7c1a      	ldrb	r2, [r3, #16]
 80025c4:	f88d 2000 	strb.w	r2, [sp]
 80025c8:	3304      	adds	r3, #4
 80025ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025cc:	f002 fd22 	bl	8005014 <USB_DevInit>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00c      	b.n	80025fc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fd66 	bl	80060c6 <USB_DevDisconnect>

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_PCD_Start+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e022      	b.n	8002666 <HAL_PCD_Start+0x62>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002640:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fc73 	bl	8004f38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fd14 	bl	8006084 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800266e:	b590      	push	{r4, r7, lr}
 8002670:	b08d      	sub	sp, #52	@ 0x34
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f003 fdd2 	bl	800622e <USB_GetMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 848c 	bne.w	8002faa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fd36 	bl	8006108 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8482 	beq.w	8002fa8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fd23 	bl	8006108 <USB_ReadInterrupts>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d107      	bne.n	80026dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f002 0202 	and.w	r2, r2, #2
 80026da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fd11 	bl	8006108 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d161      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0210 	bic.w	r2, r2, #16
 80026fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	0c5b      	lsrs	r3, r3, #17
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	2b02      	cmp	r3, #2
 800272a:	d124      	bne.n	8002776 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d035      	beq.n	80027a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6a38      	ldr	r0, [r7, #32]
 800274c:	f003 fb48 	bl	8005de0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800275c:	441a      	add	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276e:	441a      	add	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	615a      	str	r2, [r3, #20]
 8002774:	e016      	b.n	80027a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	0c5b      	lsrs	r3, r3, #17
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	2b06      	cmp	r3, #6
 8002780:	d110      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002788:	2208      	movs	r2, #8
 800278a:	4619      	mov	r1, r3
 800278c:	6a38      	ldr	r0, [r7, #32]
 800278e:	f003 fb27 	bl	8005de0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279e:	441a      	add	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0210 	orr.w	r2, r2, #16
 80027b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 fca5 	bl	8006108 <USB_ReadInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027c8:	f040 80a7 	bne.w	800291a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 fcaa 	bl	800612e <USB_ReadDevAllOutEpInterrupt>
 80027da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027dc:	e099      	b.n	8002912 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 808e 	beq.w	8002906 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fcce 	bl	8006196 <USB_ReadDevOutEPInterrupt>
 80027fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002812:	461a      	mov	r2, r3
 8002814:	2301      	movs	r3, #1
 8002816:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002818:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fe8a 	bl	8003534 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002836:	461a      	mov	r2, r3
 8002838:	2308      	movs	r3, #8
 800283a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800283c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 ff60 	bl	8003704 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	2310      	movs	r3, #16
 800285e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d030      	beq.n	80028cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002872:	2b80      	cmp	r3, #128	@ 0x80
 8002874:	d109      	bne.n	800288a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002888:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2200      	movs	r2, #0
 80028ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f005 fce1 	bl	800827c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028c6:	461a      	mov	r2, r3
 80028c8:	2302      	movs	r3, #2
 80028ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e2:	461a      	mov	r2, r3
 80028e4:	2320      	movs	r3, #32
 80028e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fe:	461a      	mov	r2, r3
 8002900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002904:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af62 	bne.w	80027de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fbf2 	bl	8006108 <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800292a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800292e:	f040 80db 	bne.w	8002ae8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fc13 	bl	8006162 <USB_ReadDevAllInEpInterrupt>
 800293c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002942:	e0cd      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80c2 	beq.w	8002ad4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fc39 	bl	80061d2 <USB_ReadDevInEPInterrupt>
 8002960:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d057      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	2201      	movs	r2, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	69f9      	ldr	r1, [r7, #28]
 8002988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800298c:	4013      	ands	r3, r2
 800298e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800299c:	461a      	mov	r2, r3
 800299e:	2301      	movs	r3, #1
 80029a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	799b      	ldrb	r3, [r3, #6]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d132      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3320      	adds	r3, #32
 80029ba:	6819      	ldr	r1, [r3, #0]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4403      	add	r3, r0
 80029ca:	331c      	adds	r3, #28
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4419      	add	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4403      	add	r3, r0
 80029de:	3320      	adds	r3, #32
 80029e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d113      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3324      	adds	r3, #36	@ 0x24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	f003 fc40 	bl	8006290 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f005 fbb5 	bl	8008186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a32:	461a      	mov	r2, r3
 8002a34:	2308      	movs	r3, #8
 8002a36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2310      	movs	r3, #16
 8002a52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2340      	movs	r3, #64	@ 0x40
 8002a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d023      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a7c:	6a38      	ldr	r0, [r7, #32]
 8002a7e:	f002 fc2d 	bl	80052dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d108      	bne.n	8002ab0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f005 fbf8 	bl	80082a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002abc:	461a      	mov	r2, r3
 8002abe:	2302      	movs	r3, #2
 8002ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002acc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fca3 	bl	800341a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f47f af2e 	bne.w	8002944 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fb0b 	bl	8006108 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002afc:	d122      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d108      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b24:	2100      	movs	r1, #0
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fe8a 	bl	8003840 <HAL_PCDEx_LPM_Callback>
 8002b2c:	e002      	b.n	8002b34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f005 fb96 	bl	8008260 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fadd 	bl	8006108 <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b58:	d112      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f005 fb52 	bl	8008214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b7e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fabf 	bl	8006108 <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b94:	f040 80b7 	bne.w	8002d06 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2110      	movs	r1, #16
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fb92 	bl	80052dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bbc:	e046      	b.n	8002c4c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bd0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002bec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c16:	0151      	lsls	r1, r2, #5
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	440a      	add	r2, r1
 8002c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c36:	0151      	lsls	r1, r2, #5
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	440a      	add	r2, r1
 8002c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	3301      	adds	r3, #1
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	791b      	ldrb	r3, [r3, #4]
 8002c50:	461a      	mov	r2, r3
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d3b2      	bcc.n	8002bbe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c66:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7bdb      	ldrb	r3, [r3, #15]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d016      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c84:	f043 030b 	orr.w	r3, r3, #11
 8002c88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c9a:	f043 030b 	orr.w	r3, r3, #11
 8002c9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca0:	e015      	b.n	8002cce <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cb4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002cb8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc8:	f043 030b 	orr.w	r3, r3, #11
 8002ccc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cdc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ce0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f003 facd 	bl	8006290 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 f9fc 	bl	8006108 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d1a:	d123      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fa92 	bl	800624a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 fb4f 	bl	80053ce <USB_GetDevSpeed>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681c      	ldr	r4, [r3, #0]
 8002d3c:	f001 f9b0 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 8002d40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d46:	461a      	mov	r2, r3
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f002 f853 	bl	8004df4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f005 fa41 	bl	80081d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 f9cd 	bl	8006108 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d10a      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f005 fa1e 	bl	80081ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 0208 	and.w	r2, r2, #8
 8002d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 f9b8 	bl	8006108 <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	d123      	bne.n	8002dea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dae:	2301      	movs	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db2:	e014      	b.n	8002dde <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 faf0 	bl	80033b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	3301      	adds	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	791b      	ldrb	r3, [r3, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d3e4      	bcc.n	8002db4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 f98a 	bl	8006108 <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dfe:	d13c      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e00:	2301      	movs	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e04:	e02b      	b.n	8002e5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3318      	adds	r3, #24
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d115      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da12      	bge.n	8002e58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3317      	adds	r3, #23
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fab0 	bl	80033b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	791b      	ldrb	r3, [r3, #4]
 8002e62:	461a      	mov	r2, r3
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d3cd      	bcc.n	8002e06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 f942 	bl	8006108 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e8e:	d156      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e90:	2301      	movs	r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e94:	e045      	b.n	8002f22 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d12e      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ebe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da2b      	bge.n	8002f1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ed0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d121      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f18:	6053      	str	r3, [r2, #4]
            break;
 8002f1a:	e008      	b.n	8002f2e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	3301      	adds	r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	791b      	ldrb	r3, [r3, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d3b3      	bcc.n	8002e96 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 f8e0 	bl	8006108 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f52:	d10a      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f005 f9b5 	bl	80082c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 f8ca 	bl	8006108 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d115      	bne.n	8002faa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f005 f9a5 	bl	80082e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	e000      	b.n	8002faa <HAL_PCD_IRQHandler+0x93c>
      return;
 8002fa8:	bf00      	nop
    }
  }
}
 8002faa:	3734      	adds	r7, #52	@ 0x34
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}

08002fb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_SetAddress+0x1a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e012      	b.n	8002ff0 <HAL_PCD_SetAddress+0x40>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 f829 	bl	8006038 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	70fb      	strb	r3, [r7, #3]
 800300a:	460b      	mov	r3, r1
 800300c:	803b      	strh	r3, [r7, #0]
 800300e:	4613      	mov	r3, r2
 8003010:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301a:	2b00      	cmp	r3, #0
 800301c:	da0f      	bge.n	800303e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 020f 	and.w	r2, r3, #15
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	3310      	adds	r3, #16
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	705a      	strb	r2, [r3, #1]
 800303c:	e00f      	b.n	800305e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	b2da      	uxtb	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800306a:	883a      	ldrh	r2, [r7, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	78ba      	ldrb	r2, [r7, #2]
 8003074:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003088:	78bb      	ldrb	r3, [r7, #2]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d102      	bne.n	8003094 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_PCD_EP_Open+0xaa>
 800309e:	2302      	movs	r3, #2
 80030a0:	e00e      	b.n	80030c0 <HAL_PCD_EP_Open+0xc8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 f9b1 	bl	8005418 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80030be:	7afb      	ldrb	r3, [r7, #11]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da0f      	bge.n	80030fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 020f 	and.w	r2, r3, #15
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	3310      	adds	r3, #16
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3304      	adds	r3, #4
 80030f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	705a      	strb	r2, [r3, #1]
 80030fa:	e00f      	b.n	800311c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_PCD_EP_Close+0x6e>
 8003132:	2302      	movs	r3, #2
 8003134:	e00e      	b.n	8003154 <HAL_PCD_EP_Close+0x8c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68f9      	ldr	r1, [r7, #12]
 8003144:	4618      	mov	r0, r3
 8003146:	f002 f9ef 	bl	8005528 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	460b      	mov	r3, r1
 800316a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316c:	7afb      	ldrb	r3, [r7, #11]
 800316e:	f003 020f 	and.w	r2, r3, #15
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	3304      	adds	r3, #4
 8003184:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	799b      	ldrb	r3, [r3, #6]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d102      	bne.n	80031b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	799b      	ldrb	r3, [r3, #6]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6979      	ldr	r1, [r7, #20]
 80031c4:	f002 fa8c 	bl	80056e0 <USB_EPStartXfer>

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	460b      	mov	r3, r1
 80031e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e2:	7afb      	ldrb	r3, [r7, #11]
 80031e4:	f003 020f 	and.w	r2, r3, #15
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	3310      	adds	r3, #16
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2201      	movs	r2, #1
 8003210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003212:	7afb      	ldrb	r3, [r7, #11]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	b2da      	uxtb	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	799b      	ldrb	r3, [r3, #6]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	799b      	ldrb	r3, [r3, #6]
 8003234:	461a      	mov	r2, r3
 8003236:	6979      	ldr	r1, [r7, #20]
 8003238:	f002 fa52 	bl	80056e0 <USB_EPStartXfer>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	7912      	ldrb	r2, [r2, #4]
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e04f      	b.n	8003304 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003268:	2b00      	cmp	r3, #0
 800326a:	da0f      	bge.n	800328c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	3310      	adds	r3, #16
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	705a      	strb	r2, [r3, #1]
 800328a:	e00d      	b.n	80032a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_PCD_EP_SetStall+0x82>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e01d      	b.n	8003304 <HAL_PCD_EP_SetStall+0xbe>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68f9      	ldr	r1, [r7, #12]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fdda 	bl	8005e90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7999      	ldrb	r1, [r3, #6]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032f4:	461a      	mov	r2, r3
 80032f6:	f002 ffcb 	bl	8006290 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	7912      	ldrb	r2, [r2, #4]
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e042      	b.n	80033b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800332a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da0f      	bge.n	8003352 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	3310      	adds	r3, #16
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	705a      	strb	r2, [r3, #1]
 8003350:	e00f      	b.n	8003372 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_PCD_EP_ClrStall+0x86>
 800338e:	2302      	movs	r3, #2
 8003390:	e00e      	b.n	80033b0 <HAL_PCD_EP_ClrStall+0xa4>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fde3 	bl	8005f6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da0c      	bge.n	80033e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 020f 	and.w	r2, r3, #15
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	3310      	adds	r3, #16
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	3304      	adds	r3, #4
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e00c      	b.n	8003400 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	4618      	mov	r0, r3
 8003408:	f002 fc02 	bl	8005c10 <USB_EPStopXfer>
 800340c:	4603      	mov	r3, r0
 800340e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003410:	7afb      	ldrb	r3, [r7, #11]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b08a      	sub	sp, #40	@ 0x28
 800341e:	af02      	add	r7, sp, #8
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	3310      	adds	r3, #16
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	3304      	adds	r3, #4
 8003440:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	429a      	cmp	r2, r3
 800344c:	d901      	bls.n	8003452 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06b      	b.n	800352a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	d902      	bls.n	800346e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3303      	adds	r3, #3
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003476:	e02a      	b.n	80034ce <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	429a      	cmp	r2, r3
 800348c:	d902      	bls.n	8003494 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3303      	adds	r3, #3
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68d9      	ldr	r1, [r3, #12]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4603      	mov	r3, r0
 80034b0:	6978      	ldr	r0, [r7, #20]
 80034b2:	f002 fc57 	bl	8005d64 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	441a      	add	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	441a      	add	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d809      	bhi.n	80034f8 <PCD_WriteEmptyTxFifo+0xde>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d203      	bcs.n	80034f8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1bf      	bne.n	8003478 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	429a      	cmp	r2, r3
 8003502:	d811      	bhi.n	8003528 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	2201      	movs	r2, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	43db      	mvns	r3, r3
 800351e:	6939      	ldr	r1, [r7, #16]
 8003520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003524:	4013      	ands	r3, r2
 8003526:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	333c      	adds	r3, #60	@ 0x3c
 800354c:	3304      	adds	r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	799b      	ldrb	r3, [r3, #6]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d17b      	bne.n	8003662 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	4a61      	ldr	r2, [pc, #388]	@ (80036fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	f240 80b9 	bls.w	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80b3 	beq.w	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003596:	461a      	mov	r2, r3
 8003598:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800359c:	6093      	str	r3, [r2, #8]
 800359e:	e0a7      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b6:	461a      	mov	r2, r3
 80035b8:	2320      	movs	r3, #32
 80035ba:	6093      	str	r3, [r2, #8]
 80035bc:	e098      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f040 8093 	bne.w	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	4a4b      	ldr	r2, [pc, #300]	@ (80036fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d90f      	bls.n	80035f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e8:	461a      	mov	r2, r3
 80035ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ee:	6093      	str	r3, [r2, #8]
 80035f0:	e07e      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	3304      	adds	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	440b      	add	r3, r1
 8003614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361e:	1ad2      	subs	r2, r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d114      	bne.n	8003654 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800363c:	461a      	mov	r2, r3
 800363e:	2101      	movs	r1, #1
 8003640:	f002 fe26 	bl	8006290 <USB_EP0_OutStart>
 8003644:	e006      	b.n	8003654 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	441a      	add	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f004 fd78 	bl	8008150 <HAL_PCD_DataOutStageCallback>
 8003660:	e046      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4a26      	ldr	r2, [pc, #152]	@ (8003700 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d124      	bne.n	80036b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003686:	6093      	str	r3, [r2, #8]
 8003688:	e032      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	2320      	movs	r3, #32
 80036a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f004 fd4f 	bl	8008150 <HAL_PCD_DataOutStageCallback>
 80036b2:	e01d      	b.n	80036f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d114      	bne.n	80036e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d108      	bne.n	80036e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036dc:	461a      	mov	r2, r3
 80036de:	2100      	movs	r1, #0
 80036e0:	f002 fdd6 	bl	8006290 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f004 fd30 	bl	8008150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	4f54300a 	.word	0x4f54300a
 8003700:	4f54310a 	.word	0x4f54310a

08003704 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	333c      	adds	r3, #60	@ 0x3c
 800371c:	3304      	adds	r3, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a15      	ldr	r2, [pc, #84]	@ (800378c <PCD_EP_OutSetupPacket_int+0x88>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d90e      	bls.n	8003758 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003750:	461a      	mov	r2, r3
 8003752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003756:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f004 fce7 	bl	800812c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a0a      	ldr	r2, [pc, #40]	@ (800378c <PCD_EP_OutSetupPacket_int+0x88>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d90c      	bls.n	8003780 <PCD_EP_OutSetupPacket_int+0x7c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	799b      	ldrb	r3, [r3, #6]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d108      	bne.n	8003780 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003778:	461a      	mov	r2, r3
 800377a:	2101      	movs	r1, #1
 800377c:	f002 fd88 	bl	8006290 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	4f54300a 	.word	0x4f54300a

08003790 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
 800379c:	4613      	mov	r3, r2
 800379e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037ae:	883b      	ldrh	r3, [r7, #0]
 80037b0:	0419      	lsls	r1, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80037bc:	e028      	b.n	8003810 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4413      	add	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e00d      	b.n	80037ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	3340      	adds	r3, #64	@ 0x40
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	3301      	adds	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3ec      	bcc.n	80037d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037f8:	883b      	ldrh	r3, [r7, #0]
 80037fa:	0418      	lsls	r0, r3, #16
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6819      	ldr	r1, [r3, #0]
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	3b01      	subs	r3, #1
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4302      	orrs	r2, r0
 8003808:	3340      	adds	r3, #64	@ 0x40
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e267      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d075      	beq.n	8003962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003876:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b04      	cmp	r3, #4
 8003880:	d00c      	beq.n	800389c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003882:	4b85      	ldr	r3, [pc, #532]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800388a:	2b08      	cmp	r3, #8
 800388c:	d112      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388e:	4b82      	ldr	r3, [pc, #520]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800389a:	d10b      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d05b      	beq.n	8003960 <HAL_RCC_OscConfig+0x108>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d157      	bne.n	8003960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e242      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038bc:	d106      	bne.n	80038cc <HAL_RCC_OscConfig+0x74>
 80038be:	4b76      	ldr	r3, [pc, #472]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a75      	ldr	r2, [pc, #468]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e01d      	b.n	8003908 <HAL_RCC_OscConfig+0xb0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x98>
 80038d6:	4b70      	ldr	r3, [pc, #448]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6f      	ldr	r2, [pc, #444]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0xb0>
 80038f0:	4b69      	ldr	r3, [pc, #420]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a68      	ldr	r2, [pc, #416]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b66      	ldr	r3, [pc, #408]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a65      	ldr	r2, [pc, #404]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fd fafe 	bl	8000f10 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fd fafa 	bl	8000f10 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	@ 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e207      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	4b5b      	ldr	r3, [pc, #364]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0xc0>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fd faea 	bl	8000f10 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003940:	f7fd fae6 	bl	8000f10 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	@ 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1f3      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	4b51      	ldr	r3, [pc, #324]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0xe8>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d063      	beq.n	8003a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397a:	4b47      	ldr	r3, [pc, #284]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003986:	4b44      	ldr	r3, [pc, #272]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x152>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1c7      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4937      	ldr	r1, [pc, #220]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039be:	e03a      	b.n	8003a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c8:	4b34      	ldr	r3, [pc, #208]	@ (8003a9c <HAL_RCC_OscConfig+0x244>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fd fa9f 	bl	8000f10 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d6:	f7fd fa9b 	bl	8000f10 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1a8      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4b28      	ldr	r3, [pc, #160]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4925      	ldr	r1, [pc, #148]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]
 8003a08:	e015      	b.n	8003a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0a:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <HAL_RCC_OscConfig+0x244>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fa7e 	bl	8000f10 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a18:	f7fd fa7a 	bl	8000f10 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e187      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d036      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HAL_RCC_OscConfig+0x248>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fd fa5e 	bl	8000f10 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fd fa5a 	bl	8000f10 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e167      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x200>
 8003a76:	e01b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <HAL_RCC_OscConfig+0x248>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fd fa47 	bl	8000f10 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	e00e      	b.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a86:	f7fd fa43 	bl	8000f10 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d907      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e150      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	42470000 	.word	0x42470000
 8003aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	4b88      	ldr	r3, [pc, #544]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ea      	bne.n	8003a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8097 	beq.w	8003bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac2:	4b81      	ldr	r3, [pc, #516]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	4b7d      	ldr	r3, [pc, #500]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ade:	4b7a      	ldr	r3, [pc, #488]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b77      	ldr	r3, [pc, #476]	@ (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d118      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	4b74      	ldr	r3, [pc, #464]	@ (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a73      	ldr	r2, [pc, #460]	@ (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7fd fa03 	bl	8000f10 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7fd f9ff 	bl	8000f10 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e10c      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	4b6a      	ldr	r3, [pc, #424]	@ (8003ccc <HAL_RCC_OscConfig+0x474>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x2ea>
 8003b34:	4b64      	ldr	r3, [pc, #400]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	4a63      	ldr	r2, [pc, #396]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b40:	e01c      	b.n	8003b7c <HAL_RCC_OscConfig+0x324>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x30c>
 8003b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	4a5e      	ldr	r2, [pc, #376]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b56:	4b5c      	ldr	r3, [pc, #368]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0x324>
 8003b64:	4b58      	ldr	r3, [pc, #352]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	4a57      	ldr	r2, [pc, #348]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b70:	4b55      	ldr	r3, [pc, #340]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	4a54      	ldr	r2, [pc, #336]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	f023 0304 	bic.w	r3, r3, #4
 8003b7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fd f9c4 	bl	8000f10 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fd f9c0 	bl	8000f10 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0cb      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	4b49      	ldr	r3, [pc, #292]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0ee      	beq.n	8003b8c <HAL_RCC_OscConfig+0x334>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7fd f9ae 	bl	8000f10 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb8:	f7fd f9aa 	bl	8000f10 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0b5      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bce:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ee      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b39      	ldr	r3, [pc, #228]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	4a38      	ldr	r2, [pc, #224]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a1 	beq.w	8003d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf6:	4b34      	ldr	r3, [pc, #208]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d05c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d141      	bne.n	8003c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b31      	ldr	r3, [pc, #196]	@ (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fd f97e 	bl	8000f10 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fd f97a 	bl	8000f10 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e087      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2a:	4b27      	ldr	r3, [pc, #156]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	491b      	ldr	r1, [pc, #108]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c60:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c66:	f7fd f953 	bl	8000f10 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6e:	f7fd f94f 	bl	8000f10 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e05c      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c80:	4b11      	ldr	r3, [pc, #68]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x416>
 8003c8c:	e054      	b.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <HAL_RCC_OscConfig+0x478>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd f93c 	bl	8000f10 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7fd f938 	bl	8000f10 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e045      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x444>
 8003cba:	e03d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e038      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <HAL_RCC_OscConfig+0x4ec>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d028      	beq.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d121      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d11a      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d111      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0cc      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b68      	ldr	r3, [pc, #416]	@ (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d90c      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b65      	ldr	r3, [pc, #404]	@ (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b63      	ldr	r3, [pc, #396]	@ (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0b8      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d9c:	4b59      	ldr	r3, [pc, #356]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a58      	ldr	r2, [pc, #352]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db4:	4b53      	ldr	r3, [pc, #332]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a52      	ldr	r2, [pc, #328]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc0:	4b50      	ldr	r3, [pc, #320]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	494d      	ldr	r1, [pc, #308]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d044      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b47      	ldr	r3, [pc, #284]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d119      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e06:	4b3f      	ldr	r3, [pc, #252]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	4b3b      	ldr	r3, [pc, #236]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e067      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e26:	4b37      	ldr	r3, [pc, #220]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 0203 	bic.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4934      	ldr	r1, [pc, #208]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e38:	f7fd f86a 	bl	8000f10 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7fd f866 	bl	8000f10 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e04f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	4b2b      	ldr	r3, [pc, #172]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 020c 	and.w	r2, r3, #12
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1eb      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e68:	4b25      	ldr	r3, [pc, #148]	@ (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d20c      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b22      	ldr	r3, [pc, #136]	@ (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b20      	ldr	r3, [pc, #128]	@ (8003f00 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e032      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9c:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4916      	ldr	r1, [pc, #88]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eba:	4b12      	ldr	r3, [pc, #72]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	490e      	ldr	r1, [pc, #56]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ece:	f000 f821 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	490a      	ldr	r1, [pc, #40]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	5ccb      	ldrb	r3, [r1, r3]
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	4a09      	ldr	r2, [pc, #36]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eea:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc ffca 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40023c00 	.word	0x40023c00
 8003f04:	40023800 	.word	0x40023800
 8003f08:	08009068 	.word	0x08009068
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	20000004 	.word	0x20000004

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f18:	b090      	sub	sp, #64	@ 0x40
 8003f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f20:	2300      	movs	r3, #0
 8003f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f24:	2300      	movs	r3, #0
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f2c:	4b59      	ldr	r3, [pc, #356]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030c 	and.w	r3, r3, #12
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d00d      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x40>
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	f200 80a1 	bhi.w	8004080 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x34>
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f46:	e09b      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f48:	4b53      	ldr	r3, [pc, #332]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003f4c:	e09b      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f4e:	4b53      	ldr	r3, [pc, #332]	@ (800409c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f52:	e098      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f54:	4b4f      	ldr	r3, [pc, #316]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f5e:	4b4d      	ldr	r3, [pc, #308]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d028      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	2200      	movs	r2, #0
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4b47      	ldr	r3, [pc, #284]	@ (800409c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f80:	fb03 f201 	mul.w	r2, r3, r1
 8003f84:	2300      	movs	r3, #0
 8003f86:	fb00 f303 	mul.w	r3, r0, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4a43      	ldr	r2, [pc, #268]	@ (800409c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f8e:	fba0 1202 	umull	r1, r2, r0, r2
 8003f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f94:	460a      	mov	r2, r1
 8003f96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f9a:	4413      	add	r3, r2
 8003f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	61fa      	str	r2, [r7, #28]
 8003fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003faa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003fae:	f7fc f967 	bl	8000280 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fba:	e053      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbc:	4b35      	ldr	r3, [pc, #212]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	099b      	lsrs	r3, r3, #6
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	617a      	str	r2, [r7, #20]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fce:	f04f 0b00 	mov.w	fp, #0
 8003fd2:	4652      	mov	r2, sl
 8003fd4:	465b      	mov	r3, fp
 8003fd6:	f04f 0000 	mov.w	r0, #0
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe4:	0150      	lsls	r0, r2, #5
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	ebb2 080a 	subs.w	r8, r2, sl
 8003fee:	eb63 090b 	sbc.w	r9, r3, fp
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ffe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004002:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004006:	ebb2 0408 	subs.w	r4, r2, r8
 800400a:	eb63 0509 	sbc.w	r5, r3, r9
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	00eb      	lsls	r3, r5, #3
 8004018:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401c:	00e2      	lsls	r2, r4, #3
 800401e:	4614      	mov	r4, r2
 8004020:	461d      	mov	r5, r3
 8004022:	eb14 030a 	adds.w	r3, r4, sl
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	eb45 030b 	adc.w	r3, r5, fp
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800403a:	4629      	mov	r1, r5
 800403c:	028b      	lsls	r3, r1, #10
 800403e:	4621      	mov	r1, r4
 8004040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004044:	4621      	mov	r1, r4
 8004046:	028a      	lsls	r2, r1, #10
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	2200      	movs	r2, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	60fa      	str	r2, [r7, #12]
 8004054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004058:	f7fc f912 	bl	8000280 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4613      	mov	r3, r2
 8004062:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004064:	4b0b      	ldr	r3, [pc, #44]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x180>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	3301      	adds	r3, #1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004074:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800407e:	e002      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004080:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x184>)
 8004082:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004088:	4618      	mov	r0, r3
 800408a:	3740      	adds	r7, #64	@ 0x40
 800408c:	46bd      	mov	sp, r7
 800408e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800
 8004098:	00f42400 	.word	0x00f42400
 800409c:	017d7840 	.word	0x017d7840

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000000 	.word	0x20000000

080040b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040bc:	f7ff fff0 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0a9b      	lsrs	r3, r3, #10
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4903      	ldr	r1, [pc, #12]	@ (80040dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08009078 	.word	0x08009078

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e4:	f7ff ffdc 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0b5b      	lsrs	r3, r3, #13
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	@ (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	08009078 	.word	0x08009078

08004108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e042      	b.n	80041a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fc fde2 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	@ 0x24
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800414a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fb79 	bl	8004844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	@ 0x28
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d175      	bne.n	80042b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_UART_Transmit+0x2c>
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e06e      	b.n	80042b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2221      	movs	r2, #33	@ 0x21
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041e6:	f7fc fe93 	bl	8000f10 <HAL_GetTick>
 80041ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004200:	d108      	bne.n	8004214 <HAL_UART_Transmit+0x6c>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e003      	b.n	800421c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800421c:	e02e      	b.n	800427c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2200      	movs	r2, #0
 8004226:	2180      	movs	r1, #128	@ 0x80
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f98b 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e03a      	b.n	80042b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004254:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	3302      	adds	r3, #2
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	e007      	b.n	800426e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	3301      	adds	r3, #1
 800426c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1cb      	bne.n	800421e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	2140      	movs	r1, #64	@ 0x40
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f957 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e006      	b.n	80042b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d112      	bne.n	80042fe <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_UART_Receive_DMA+0x26>
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e00b      	b.n	8004300 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	461a      	mov	r2, r3
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f97f 	bl	80045f8 <UART_Start_Receive_DMA>
 80042fa:	4603      	mov	r3, r0
 80042fc:	e000      	b.n	8004300 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b09c      	sub	sp, #112	@ 0x70
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004354:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d172      	bne.n	800444a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004366:	2200      	movs	r2, #0
 8004368:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800437a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800437c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004380:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800438a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800438c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004390:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e5      	bne.n	800436a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3314      	adds	r3, #20
 80043a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80043b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3314      	adds	r3, #20
 80043bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043be:	647a      	str	r2, [r7, #68]	@ 0x44
 80043c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e5      	bne.n	800439e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3314      	adds	r3, #20
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	623b      	str	r3, [r7, #32]
   return(result);
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3314      	adds	r3, #20
 80043f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e5      	bne.n	80043d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800440e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	2b01      	cmp	r3, #1
 8004414:	d119      	bne.n	800444a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	60fb      	str	r3, [r7, #12]
   return(result);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f023 0310 	bic.w	r3, r3, #16
 800442c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800442e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004436:	61fa      	str	r2, [r7, #28]
 8004438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	69b9      	ldr	r1, [r7, #24]
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	617b      	str	r3, [r7, #20]
   return(result);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444c:	2200      	movs	r2, #0
 800444e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	2b01      	cmp	r3, #1
 8004456:	d106      	bne.n	8004466 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800445c:	4619      	mov	r1, r3
 800445e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004460:	f7ff ff66 	bl	8004330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004464:	e002      	b.n	800446c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004466:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004468:	f7fc fa0c 	bl	8000884 <HAL_UART_RxCpltCallback>
}
 800446c:	bf00      	nop
 800446e:	3770      	adds	r7, #112	@ 0x70
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004480:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448c:	2b01      	cmp	r3, #1
 800448e:	d108      	bne.n	80044a2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff48 	bl	8004330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044a0:	e002      	b.n	80044a8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff ff30 	bl	8004308 <HAL_UART_RxHalfCpltCallback>
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044cc:	2b80      	cmp	r3, #128	@ 0x80
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b21      	cmp	r3, #33	@ 0x21
 80044e2:	d108      	bne.n	80044f6 <UART_DMAError+0x46>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80044f0:	68b8      	ldr	r0, [r7, #8]
 80044f2:	f000 f91b 	bl	800472c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b22      	cmp	r3, #34	@ 0x22
 8004516:	d108      	bne.n	800452a <UART_DMAError+0x7a>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2200      	movs	r2, #0
 8004522:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004524:	68b8      	ldr	r0, [r7, #8]
 8004526:	f000 f929 	bl	800477c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	f043 0210 	orr.w	r2, r3, #16
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004536:	68b8      	ldr	r0, [r7, #8]
 8004538:	f7ff fef0 	bl	800431c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004554:	e03b      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d037      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455e:	f7fc fcd7 	bl	8000f10 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	429a      	cmp	r2, r3
 800456c:	d302      	bcc.n	8004574 <UART_WaitOnFlagUntilTimeout+0x30>
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e03a      	b.n	80045ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d023      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b80      	cmp	r3, #128	@ 0x80
 800458a:	d020      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b40      	cmp	r3, #64	@ 0x40
 8004590:	d01d      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b08      	cmp	r3, #8
 800459e:	d116      	bne.n	80045ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f8e0 	bl	800477c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2208      	movs	r2, #8
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e00f      	b.n	80045ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4013      	ands	r3, r2
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	bf0c      	ite	eq
 80045de:	2301      	moveq	r3, #1
 80045e0:	2300      	movne	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d0b4      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b098      	sub	sp, #96	@ 0x60
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2222      	movs	r2, #34	@ 0x22
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004624:	4a3e      	ldr	r2, [pc, #248]	@ (8004720 <UART_Start_Receive_DMA+0x128>)
 8004626:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462c:	4a3d      	ldr	r2, [pc, #244]	@ (8004724 <UART_Start_Receive_DMA+0x12c>)
 800462e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	4a3c      	ldr	r2, [pc, #240]	@ (8004728 <UART_Start_Receive_DMA+0x130>)
 8004636:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463c:	2200      	movs	r2, #0
 800463e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004640:	f107 0308 	add.w	r3, r7, #8
 8004644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	f7fd fa4c 	bl	8001af4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d019      	beq.n	80046ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800468a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004690:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800469a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800469c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80046a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e5      	bne.n	800467a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3314      	adds	r3, #20
 80046b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80046d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e5      	bne.n	80046ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3314      	adds	r3, #20
 80046e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	617b      	str	r3, [r7, #20]
   return(result);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004702:	627a      	str	r2, [r7, #36]	@ 0x24
 8004704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6a39      	ldr	r1, [r7, #32]
 8004708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3760      	adds	r7, #96	@ 0x60
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	08004349 	.word	0x08004349
 8004724:	08004475 	.word	0x08004475
 8004728:	080044b1 	.word	0x080044b1

0800472c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	@ 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	60bb      	str	r3, [r7, #8]
   return(result);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	61ba      	str	r2, [r7, #24]
 8004756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6979      	ldr	r1, [r7, #20]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	613b      	str	r3, [r7, #16]
   return(result);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e5      	bne.n	8004734 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004770:	bf00      	nop
 8004772:	3724      	adds	r7, #36	@ 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b095      	sub	sp, #84	@ 0x54
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800479a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80047a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e5      	bne.n	8004784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3314      	adds	r3, #20
 80047d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d119      	bne.n	8004828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	60bb      	str	r3, [r7, #8]
   return(result);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f023 0310 	bic.w	r3, r3, #16
 800480a:	647b      	str	r3, [r7, #68]	@ 0x44
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004814:	61ba      	str	r2, [r7, #24]
 8004816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	613b      	str	r3, [r7, #16]
   return(result);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e5      	bne.n	80047f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004836:	bf00      	nop
 8004838:	3754      	adds	r7, #84	@ 0x54
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004848:	b0c0      	sub	sp, #256	@ 0x100
 800484a:	af00      	add	r7, sp, #0
 800484c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	68d9      	ldr	r1, [r3, #12]
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	ea40 0301 	orr.w	r3, r0, r1
 800486c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	431a      	orrs	r2, r3
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	431a      	orrs	r2, r3
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800489c:	f021 010c 	bic.w	r1, r1, #12
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048aa:	430b      	orrs	r3, r1
 80048ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048be:	6999      	ldr	r1, [r3, #24]
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	ea40 0301 	orr.w	r3, r0, r1
 80048ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004b10 <UART_SetConfig+0x2cc>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d005      	beq.n	80048e4 <UART_SetConfig+0xa0>
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b8d      	ldr	r3, [pc, #564]	@ (8004b14 <UART_SetConfig+0x2d0>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d104      	bne.n	80048ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7ff fbfc 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 80048e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048ec:	e003      	b.n	80048f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ee:	f7ff fbe3 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 80048f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004900:	f040 810c 	bne.w	8004b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800490e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	1891      	adds	r1, r2, r2
 800491c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800491e:	415b      	adcs	r3, r3
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004926:	4621      	mov	r1, r4
 8004928:	eb12 0801 	adds.w	r8, r2, r1
 800492c:	4629      	mov	r1, r5
 800492e:	eb43 0901 	adc.w	r9, r3, r1
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800493e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004946:	4690      	mov	r8, r2
 8004948:	4699      	mov	r9, r3
 800494a:	4623      	mov	r3, r4
 800494c:	eb18 0303 	adds.w	r3, r8, r3
 8004950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004954:	462b      	mov	r3, r5
 8004956:	eb49 0303 	adc.w	r3, r9, r3
 800495a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800496a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800496e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004972:	460b      	mov	r3, r1
 8004974:	18db      	adds	r3, r3, r3
 8004976:	653b      	str	r3, [r7, #80]	@ 0x50
 8004978:	4613      	mov	r3, r2
 800497a:	eb42 0303 	adc.w	r3, r2, r3
 800497e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004988:	f7fb fc7a 	bl	8000280 <__aeabi_uldivmod>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4b61      	ldr	r3, [pc, #388]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004992:	fba3 2302 	umull	r2, r3, r3, r2
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	011c      	lsls	r4, r3, #4
 800499a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	1891      	adds	r1, r2, r2
 80049b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049b4:	415b      	adcs	r3, r3
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049bc:	4641      	mov	r1, r8
 80049be:	eb12 0a01 	adds.w	sl, r2, r1
 80049c2:	4649      	mov	r1, r9
 80049c4:	eb43 0b01 	adc.w	fp, r3, r1
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049dc:	4692      	mov	sl, r2
 80049de:	469b      	mov	fp, r3
 80049e0:	4643      	mov	r3, r8
 80049e2:	eb1a 0303 	adds.w	r3, sl, r3
 80049e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049ea:	464b      	mov	r3, r9
 80049ec:	eb4b 0303 	adc.w	r3, fp, r3
 80049f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	18db      	adds	r3, r3, r3
 8004a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a0e:	4613      	mov	r3, r2
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a1e:	f7fb fc2f 	bl	8000280 <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2264      	movs	r2, #100	@ 0x64
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	1acb      	subs	r3, r1, r3
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a3e:	4b36      	ldr	r3, [pc, #216]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004a40:	fba3 2302 	umull	r2, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a4c:	441c      	add	r4, r3
 8004a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a60:	4642      	mov	r2, r8
 8004a62:	464b      	mov	r3, r9
 8004a64:	1891      	adds	r1, r2, r2
 8004a66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a68:	415b      	adcs	r3, r3
 8004a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a70:	4641      	mov	r1, r8
 8004a72:	1851      	adds	r1, r2, r1
 8004a74:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a76:	4649      	mov	r1, r9
 8004a78:	414b      	adcs	r3, r1
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a88:	4659      	mov	r1, fp
 8004a8a:	00cb      	lsls	r3, r1, #3
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a92:	4651      	mov	r1, sl
 8004a94:	00ca      	lsls	r2, r1, #3
 8004a96:	4610      	mov	r0, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004abc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	18db      	adds	r3, r3, r3
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aca:	4613      	mov	r3, r2
 8004acc:	eb42 0303 	adc.w	r3, r2, r3
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ada:	f7fb fbd1 	bl	8000280 <__aeabi_uldivmod>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	2164      	movs	r1, #100	@ 0x64
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	3332      	adds	r3, #50	@ 0x32
 8004af6:	4a08      	ldr	r2, [pc, #32]	@ (8004b18 <UART_SetConfig+0x2d4>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	f003 0207 	and.w	r2, r3, #7
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4422      	add	r2, r4
 8004b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b0c:	e106      	b.n	8004d1c <UART_SetConfig+0x4d8>
 8004b0e:	bf00      	nop
 8004b10:	40011000 	.word	0x40011000
 8004b14:	40011400 	.word	0x40011400
 8004b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b2e:	4642      	mov	r2, r8
 8004b30:	464b      	mov	r3, r9
 8004b32:	1891      	adds	r1, r2, r2
 8004b34:	6239      	str	r1, [r7, #32]
 8004b36:	415b      	adcs	r3, r3
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b3e:	4641      	mov	r1, r8
 8004b40:	1854      	adds	r4, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0501 	adc.w	r5, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	00eb      	lsls	r3, r5, #3
 8004b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b56:	00e2      	lsls	r2, r4, #3
 8004b58:	4614      	mov	r4, r2
 8004b5a:	461d      	mov	r5, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	18e3      	adds	r3, r4, r3
 8004b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b64:	464b      	mov	r3, r9
 8004b66:	eb45 0303 	adc.w	r3, r5, r3
 8004b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	008b      	lsls	r3, r1, #2
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b94:	4621      	mov	r1, r4
 8004b96:	008a      	lsls	r2, r1, #2
 8004b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b9c:	f7fb fb70 	bl	8000280 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4b60      	ldr	r3, [pc, #384]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	011c      	lsls	r4, r3, #4
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	1891      	adds	r1, r2, r2
 8004bc6:	61b9      	str	r1, [r7, #24]
 8004bc8:	415b      	adcs	r3, r3
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	1851      	adds	r1, r2, r1
 8004bd4:	6139      	str	r1, [r7, #16]
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	414b      	adcs	r3, r1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be8:	4659      	mov	r1, fp
 8004bea:	00cb      	lsls	r3, r1, #3
 8004bec:	4651      	mov	r1, sl
 8004bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	00ca      	lsls	r2, r1, #3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c04:	464b      	mov	r3, r9
 8004c06:	460a      	mov	r2, r1
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c28:	4649      	mov	r1, r9
 8004c2a:	008b      	lsls	r3, r1, #2
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c32:	4641      	mov	r1, r8
 8004c34:	008a      	lsls	r2, r1, #2
 8004c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c3a:	f7fb fb21 	bl	8000280 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	4b38      	ldr	r3, [pc, #224]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004c46:	fba3 2301 	umull	r2, r3, r3, r1
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2264      	movs	r2, #100	@ 0x64
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	1acb      	subs	r3, r1, r3
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	3332      	adds	r3, #50	@ 0x32
 8004c58:	4a33      	ldr	r2, [pc, #204]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c64:	441c      	add	r4, r3
 8004c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c84:	4641      	mov	r1, r8
 8004c86:	1851      	adds	r1, r2, r1
 8004c88:	6039      	str	r1, [r7, #0]
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	414b      	adcs	r3, r1
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	00cb      	lsls	r3, r1, #3
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	00ca      	lsls	r2, r1, #3
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	460a      	mov	r2, r1
 8004cba:	eb42 0303 	adc.w	r3, r2, r3
 8004cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cca:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cd8:	4649      	mov	r1, r9
 8004cda:	008b      	lsls	r3, r1, #2
 8004cdc:	4641      	mov	r1, r8
 8004cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	008a      	lsls	r2, r1, #2
 8004ce6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004cea:	f7fb fac9 	bl	8000280 <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	2164      	movs	r1, #100	@ 0x64
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	3332      	adds	r3, #50	@ 0x32
 8004d06:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <UART_SetConfig+0x4e4>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	f003 020f 	and.w	r2, r3, #15
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4422      	add	r2, r4
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d22:	46bd      	mov	sp, r7
 8004d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d28:	51eb851f 	.word	0x51eb851f

08004d2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	f107 001c 	add.w	r0, r7, #28
 8004d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d123      	bne.n	8004d8e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d105      	bne.n	8004d82 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f001 fae2 	bl	800634c <USB_CoreReset>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e01b      	b.n	8004dc6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 fad6 	bl	800634c <USB_CoreReset>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004da4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004db8:	e005      	b.n	8004dc6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dc6:	7fbb      	ldrb	r3, [r7, #30]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10b      	bne.n	8004de4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f043 0206 	orr.w	r2, r3, #6
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f043 0220 	orr.w	r2, r3, #32
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df0:	b004      	add	sp, #16
 8004df2:	4770      	bx	lr

08004df4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d165      	bne.n	8004ed4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4a41      	ldr	r2, [pc, #260]	@ (8004f10 <USB_SetTurnaroundTime+0x11c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d906      	bls.n	8004e1e <USB_SetTurnaroundTime+0x2a>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a40      	ldr	r2, [pc, #256]	@ (8004f14 <USB_SetTurnaroundTime+0x120>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d202      	bcs.n	8004e1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e18:	230f      	movs	r3, #15
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e062      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4a3c      	ldr	r2, [pc, #240]	@ (8004f14 <USB_SetTurnaroundTime+0x120>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d306      	bcc.n	8004e34 <USB_SetTurnaroundTime+0x40>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a3b      	ldr	r2, [pc, #236]	@ (8004f18 <USB_SetTurnaroundTime+0x124>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d202      	bcs.n	8004e34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e2e:	230e      	movs	r3, #14
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e057      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a38      	ldr	r2, [pc, #224]	@ (8004f18 <USB_SetTurnaroundTime+0x124>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d306      	bcc.n	8004e4a <USB_SetTurnaroundTime+0x56>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a37      	ldr	r2, [pc, #220]	@ (8004f1c <USB_SetTurnaroundTime+0x128>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d202      	bcs.n	8004e4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e44:	230d      	movs	r3, #13
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e04c      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a33      	ldr	r2, [pc, #204]	@ (8004f1c <USB_SetTurnaroundTime+0x128>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d306      	bcc.n	8004e60 <USB_SetTurnaroundTime+0x6c>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a32      	ldr	r2, [pc, #200]	@ (8004f20 <USB_SetTurnaroundTime+0x12c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d802      	bhi.n	8004e60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e041      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a2f      	ldr	r2, [pc, #188]	@ (8004f20 <USB_SetTurnaroundTime+0x12c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d906      	bls.n	8004e76 <USB_SetTurnaroundTime+0x82>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f24 <USB_SetTurnaroundTime+0x130>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d802      	bhi.n	8004e76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e70:	230b      	movs	r3, #11
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e036      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	@ (8004f24 <USB_SetTurnaroundTime+0x130>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d906      	bls.n	8004e8c <USB_SetTurnaroundTime+0x98>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a29      	ldr	r2, [pc, #164]	@ (8004f28 <USB_SetTurnaroundTime+0x134>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d802      	bhi.n	8004e8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e86:	230a      	movs	r3, #10
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e02b      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a26      	ldr	r2, [pc, #152]	@ (8004f28 <USB_SetTurnaroundTime+0x134>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d906      	bls.n	8004ea2 <USB_SetTurnaroundTime+0xae>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a25      	ldr	r2, [pc, #148]	@ (8004f2c <USB_SetTurnaroundTime+0x138>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d202      	bcs.n	8004ea2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e9c:	2309      	movs	r3, #9
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e020      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a21      	ldr	r2, [pc, #132]	@ (8004f2c <USB_SetTurnaroundTime+0x138>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d306      	bcc.n	8004eb8 <USB_SetTurnaroundTime+0xc4>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a20      	ldr	r2, [pc, #128]	@ (8004f30 <USB_SetTurnaroundTime+0x13c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d802      	bhi.n	8004eb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e015      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <USB_SetTurnaroundTime+0x13c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d906      	bls.n	8004ece <USB_SetTurnaroundTime+0xda>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f34 <USB_SetTurnaroundTime+0x140>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d202      	bcs.n	8004ece <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ec8:	2307      	movs	r3, #7
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e00a      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ece:	2306      	movs	r3, #6
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e007      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004eda:	2309      	movs	r3, #9
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e001      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ee0:	2309      	movs	r3, #9
 8004ee2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	029b      	lsls	r3, r3, #10
 8004ef8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	00d8acbf 	.word	0x00d8acbf
 8004f14:	00e4e1c0 	.word	0x00e4e1c0
 8004f18:	00f42400 	.word	0x00f42400
 8004f1c:	01067380 	.word	0x01067380
 8004f20:	011a499f 	.word	0x011a499f
 8004f24:	01312cff 	.word	0x01312cff
 8004f28:	014ca43f 	.word	0x014ca43f
 8004f2c:	016e3600 	.word	0x016e3600
 8004f30:	01a6ab1f 	.word	0x01a6ab1f
 8004f34:	01e84800 	.word	0x01e84800

08004f38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f043 0201 	orr.w	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d115      	bne.n	8004fca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004faa:	200a      	movs	r0, #10
 8004fac:	f7fb ffbc 	bl	8000f28 <HAL_Delay>
      ms += 10U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	330a      	adds	r3, #10
 8004fb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 f939 	bl	800622e <USB_GetMode>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d01e      	beq.n	8005000 <USB_SetCurrentMode+0x84>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fc6:	d9f0      	bls.n	8004faa <USB_SetCurrentMode+0x2e>
 8004fc8:	e01a      	b.n	8005000 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d115      	bne.n	8004ffc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fdc:	200a      	movs	r0, #10
 8004fde:	f7fb ffa3 	bl	8000f28 <HAL_Delay>
      ms += 10U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	330a      	adds	r3, #10
 8004fe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f001 f920 	bl	800622e <USB_GetMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <USB_SetCurrentMode+0x84>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ff8:	d9f0      	bls.n	8004fdc <USB_SetCurrentMode+0x60>
 8004ffa:	e001      	b.n	8005000 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e005      	b.n	800500c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2bc8      	cmp	r3, #200	@ 0xc8
 8005004:	d101      	bne.n	800500a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005014:	b084      	sub	sp, #16
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	e009      	b.n	8005048 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3340      	adds	r3, #64	@ 0x40
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	3301      	adds	r3, #1
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b0e      	cmp	r3, #14
 800504c:	d9f2      	bls.n	8005034 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800504e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005052:	2b00      	cmp	r3, #0
 8005054:	d11c      	bne.n	8005090 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005064:	f043 0302 	orr.w	r3, r3, #2
 8005068:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005086:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38
 800508e:	e00b      	b.n	80050a8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050ae:	461a      	mov	r2, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10d      	bne.n	80050d8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050c4:	2100      	movs	r1, #0
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f968 	bl	800539c <USB_SetDevSpeed>
 80050cc:	e008      	b.n	80050e0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050ce:	2101      	movs	r1, #1
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f963 	bl	800539c <USB_SetDevSpeed>
 80050d6:	e003      	b.n	80050e0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050d8:	2103      	movs	r1, #3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f95e 	bl	800539c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050e0:	2110      	movs	r1, #16
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8fa 	bl	80052dc <USB_FlushTxFifo>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f924 	bl	8005340 <USB_FlushRxFifo>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005108:	461a      	mov	r2, r3
 800510a:	2300      	movs	r3, #0
 800510c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e043      	b.n	80051b4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800513e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005142:	d118      	bne.n	8005176 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005156:	461a      	mov	r2, r3
 8005158:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e013      	b.n	8005188 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516c:	461a      	mov	r2, r3
 800516e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e008      	b.n	8005188 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005182:	461a      	mov	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a6:	461a      	mov	r2, r3
 80051a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3301      	adds	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051b8:	461a      	mov	r2, r3
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4293      	cmp	r3, r2
 80051be:	d3b5      	bcc.n	800512c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e043      	b.n	800524e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051dc:	d118      	bne.n	8005210 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f0:	461a      	mov	r2, r3
 80051f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e013      	b.n	8005222 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e008      	b.n	8005222 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	2300      	movs	r3, #0
 8005220:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	2300      	movs	r3, #0
 8005232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005240:	461a      	mov	r2, r3
 8005242:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	3301      	adds	r3, #1
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005252:	461a      	mov	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4293      	cmp	r3, r2
 8005258:	d3b5      	bcc.n	80051c6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800526c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800527a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800527c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f043 0210 	orr.w	r2, r3, #16
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <USB_DevInit+0x2c4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800529c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f043 0208 	orr.w	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052c0:	f043 0304 	orr.w	r3, r3, #4
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d4:	b004      	add	sp, #16
 80052d6:	4770      	bx	lr
 80052d8:	803c3800 	.word	0x803c3800

080052dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3301      	adds	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052f6:	d901      	bls.n	80052fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e01b      	b.n	8005334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	daf2      	bge.n	80052ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	019b      	lsls	r3, r3, #6
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005320:	d901      	bls.n	8005326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e006      	b.n	8005334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b20      	cmp	r3, #32
 8005330:	d0f0      	beq.n	8005314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005358:	d901      	bls.n	800535e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e018      	b.n	8005390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	daf2      	bge.n	800534c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2210      	movs	r2, #16
 800536e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800537c:	d901      	bls.n	8005382 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e006      	b.n	8005390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b10      	cmp	r3, #16
 800538c:	d0f0      	beq.n	8005370 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0306 	and.w	r3, r3, #6
 80053e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053ee:	2300      	movs	r3, #0
 80053f0:	75fb      	strb	r3, [r7, #23]
 80053f2:	e00a      	b.n	800540a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d002      	beq.n	8005400 <USB_GetDevSpeed+0x32>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b06      	cmp	r3, #6
 80053fe:	d102      	bne.n	8005406 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005400:	2302      	movs	r3, #2
 8005402:	75fb      	strb	r3, [r7, #23]
 8005404:	e001      	b.n	800540a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005406:	230f      	movs	r3, #15
 8005408:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800540a:	7dfb      	ldrb	r3, [r7, #23]
}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d13a      	bne.n	80054aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	2101      	movs	r1, #1
 8005446:	fa01 f303 	lsl.w	r3, r1, r3
 800544a:	b29b      	uxth	r3, r3
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005452:	4313      	orrs	r3, r2
 8005454:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d155      	bne.n	8005518 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	791b      	ldrb	r3, [r3, #4]
 8005486:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005488:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	059b      	lsls	r3, r3, #22
 800548e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005490:	4313      	orrs	r3, r2
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800549e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e036      	b.n	8005518 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	2101      	movs	r1, #1
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d11a      	bne.n	8005518 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054fe:	430b      	orrs	r3, r1
 8005500:	4313      	orrs	r3, r2
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005516:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d161      	bne.n	8005608 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800555a:	d11f      	bne.n	800559c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005576:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800557a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005596:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800559a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	2101      	movs	r1, #1
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055bc:	4013      	ands	r3, r2
 80055be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	2101      	movs	r1, #1
 80055d2:	fa01 f303 	lsl.w	r3, r1, r3
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055e0:	4013      	ands	r3, r2
 80055e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	0159      	lsls	r1, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	440b      	add	r3, r1
 80055fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fe:	4619      	mov	r1, r3
 8005600:	4b35      	ldr	r3, [pc, #212]	@ (80056d8 <USB_DeactivateEndpoint+0x1b0>)
 8005602:	4013      	ands	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
 8005606:	e060      	b.n	80056ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800561a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800561e:	d11f      	bne.n	8005660 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800563a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800563e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800565a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800565e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	43db      	mvns	r3, r3
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005680:	4013      	ands	r3, r2
 8005682:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	2101      	movs	r1, #1
 8005696:	fa01 f303 	lsl.w	r3, r1, r3
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	43db      	mvns	r3, r3
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a4:	4013      	ands	r3, r2
 80056a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0159      	lsls	r1, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	440b      	add	r3, r1
 80056be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c2:	4619      	mov	r1, r3
 80056c4:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <USB_DeactivateEndpoint+0x1b4>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	ec337800 	.word	0xec337800
 80056dc:	eff37800 	.word	0xeff37800

080056e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	@ 0x28
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	f040 817a 	bne.w	80059f6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d132      	bne.n	8005770 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	440a      	add	r2, r1
 8005720:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005724:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005728:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800572c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005748:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800574c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005768:	0cdb      	lsrs	r3, r3, #19
 800576a:	04db      	lsls	r3, r3, #19
 800576c:	6113      	str	r3, [r2, #16]
 800576e:	e092      	b.n	8005896 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800578a:	0cdb      	lsrs	r3, r3, #19
 800578c:	04db      	lsls	r3, r3, #19
 800578e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11a      	bne.n	80057f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d903      	bls.n	80057ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057ec:	6113      	str	r3, [r2, #16]
 80057ee:	e01b      	b.n	8005828 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6919      	ldr	r1, [r3, #16]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	440b      	add	r3, r1
 8005808:	1e59      	subs	r1, r3, #1
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005812:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005814:	4ba2      	ldr	r3, [pc, #648]	@ (8005aa0 <USB_EPStartXfer+0x3c0>)
 8005816:	400b      	ands	r3, r1
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	0148      	lsls	r0, r1, #5
 800581c:	69f9      	ldr	r1, [r7, #28]
 800581e:	4401      	add	r1, r0
 8005820:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005824:	4313      	orrs	r3, r2
 8005826:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	0148      	lsls	r0, r1, #5
 8005842:	69f9      	ldr	r1, [r7, #28]
 8005844:	4401      	add	r1, r0
 8005846:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800584a:	4313      	orrs	r3, r2
 800584c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	791b      	ldrb	r3, [r3, #4]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d11f      	bne.n	8005896 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005870:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005874:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005890:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005894:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d14b      	bne.n	8005934 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d009      	beq.n	80058b8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	791b      	ldrb	r3, [r3, #4]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d128      	bne.n	8005912 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d110      	bne.n	80058f2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e00f      	b.n	8005912 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005910:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800592c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e165      	b.n	8005c00 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005952:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	791b      	ldrb	r3, [r3, #4]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d015      	beq.n	8005988 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 814d 	beq.w	8005c00 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800596c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	2101      	movs	r1, #1
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	69f9      	ldr	r1, [r7, #28]
 800597e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005982:	4313      	orrs	r3, r2
 8005984:	634b      	str	r3, [r1, #52]	@ 0x34
 8005986:	e13b      	b.n	8005c00 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d110      	bne.n	80059ba <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e00f      	b.n	80059da <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	b298      	uxth	r0, r3
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4603      	mov	r3, r0
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f9b8 	bl	8005d64 <USB_WritePacket>
 80059f4:	e104      	b.n	8005c00 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a10:	0cdb      	lsrs	r3, r3, #19
 8005a12:	04db      	lsls	r3, r3, #19
 8005a14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a38:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d131      	bne.n	8005aa4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6e:	69b9      	ldr	r1, [r7, #24]
 8005a70:	0148      	lsls	r0, r1, #5
 8005a72:	69f9      	ldr	r1, [r7, #28]
 8005a74:	4401      	add	r1, r0
 8005a76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a9c:	6113      	str	r3, [r2, #16]
 8005a9e:	e061      	b.n	8005b64 <USB_EPStartXfer+0x484>
 8005aa0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d123      	bne.n	8005af4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	0148      	lsls	r0, r1, #5
 8005ac6:	69f9      	ldr	r1, [r7, #28]
 8005ac8:	4401      	add	r1, r0
 8005aca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005af0:	6113      	str	r3, [r2, #16]
 8005af2:	e037      	b.n	8005b64 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	1e5a      	subs	r2, r3, #1
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	8afa      	ldrh	r2, [r7, #22]
 8005b10:	fb03 f202 	mul.w	r2, r3, r2
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	8afb      	ldrh	r3, [r7, #22]
 8005b28:	04d9      	lsls	r1, r3, #19
 8005b2a:	4b38      	ldr	r3, [pc, #224]	@ (8005c0c <USB_EPStartXfer+0x52c>)
 8005b2c:	400b      	ands	r3, r1
 8005b2e:	69b9      	ldr	r1, [r7, #24]
 8005b30:	0148      	lsls	r0, r1, #5
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	4401      	add	r1, r0
 8005b36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	0148      	lsls	r0, r1, #5
 8005b58:	69f9      	ldr	r1, [r7, #28]
 8005b5a:	4401      	add	r1, r0
 8005b5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b60:	4313      	orrs	r3, r2
 8005b62:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d10d      	bne.n	8005b86 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68d9      	ldr	r1, [r3, #12]
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	460a      	mov	r2, r1
 8005b84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	791b      	ldrb	r3, [r3, #4]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d128      	bne.n	8005be0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d110      	bne.n	8005bc0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e00f      	b.n	8005be0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bfa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005bfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	1ff80000 	.word	0x1ff80000

08005c10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d14a      	bne.n	8005cc4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c46:	f040 8086 	bne.w	8005d56 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d902      	bls.n	8005ca8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca6:	e056      	b.n	8005d56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cc0:	d0e7      	beq.n	8005c92 <USB_EPStopXfer+0x82>
 8005cc2:	e048      	b.n	8005d56 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cdc:	d13b      	bne.n	8005d56 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d00:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d902      	bls.n	8005d3c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3a:	e00c      	b.n	8005d56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d54:	d0e7      	beq.n	8005d26 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	@ 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	460b      	mov	r3, r1
 8005d74:	71fb      	strb	r3, [r7, #7]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d123      	bne.n	8005dd2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d8a:	88bb      	ldrh	r3, [r7, #4]
 8005d8c:	3303      	adds	r3, #3
 8005d8e:	089b      	lsrs	r3, r3, #2
 8005d90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e018      	b.n	8005dca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	031a      	lsls	r2, r3, #12
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da4:	461a      	mov	r2, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	3301      	adds	r3, #1
 8005db0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	3301      	adds	r3, #1
 8005db6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3e2      	bcc.n	8005d98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3724      	adds	r7, #36	@ 0x24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b08b      	sub	sp, #44	@ 0x2c
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	e014      	b.n	8005e36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	3301      	adds	r3, #1
 8005e22:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	3301      	adds	r3, #1
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	3301      	adds	r3, #1
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d3e6      	bcc.n	8005e0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e3e:	8bfb      	ldrh	r3, [r7, #30]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01e      	beq.n	8005e82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f107 0310 	add.w	r3, r7, #16
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	701a      	strb	r2, [r3, #0]
      i++;
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	3301      	adds	r3, #1
 8005e74:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005e76:	8bfb      	ldrh	r3, [r7, #30]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e7c:	8bfb      	ldrh	r3, [r7, #30]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ea      	bne.n	8005e58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	372c      	adds	r7, #44	@ 0x2c
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d12c      	bne.n	8005f06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	db12      	blt.n	8005ee4 <USB_EPSetStall+0x54>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00f      	beq.n	8005ee4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ede:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ee2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005efe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e02b      	b.n	8005f5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	db12      	blt.n	8005f3e <USB_EPSetStall+0xae>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00f      	beq.n	8005f3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d128      	bne.n	8005fda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	791b      	ldrb	r3, [r3, #4]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d003      	beq.n	8005fb8 <USB_EPClearStall+0x4c>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	791b      	ldrb	r3, [r3, #4]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d138      	bne.n	800602a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	e027      	b.n	800602a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ff8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d003      	beq.n	800600a <USB_EPClearStall+0x9e>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	791b      	ldrb	r3, [r3, #4]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d10f      	bne.n	800602a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006028:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006056:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800605a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800606c:	68f9      	ldr	r1, [r7, #12]
 800606e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006072:	4313      	orrs	r3, r2
 8006074:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060b2:	f023 0302 	bic.w	r3, r3, #2
 80060b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060f4:	f043 0302 	orr.w	r3, r3, #2
 80060f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006120:	68fb      	ldr	r3, [r7, #12]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4013      	ands	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	0c1b      	lsrs	r3, r3, #16
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	4013      	ands	r3, r2
 8006184:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	b29b      	uxth	r3, r3
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061c4:	68bb      	ldr	r3, [r7, #8]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	01db      	lsls	r3, r3, #7
 8006204:	b2db      	uxtb	r3, r3
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4013      	ands	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006220:	68bb      	ldr	r3, [r7, #8]
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f003 0301 	and.w	r3, r3, #1
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006264:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006268:	f023 0307 	bic.w	r3, r3, #7
 800626c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800627c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006280:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	460b      	mov	r3, r1
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	333c      	adds	r3, #60	@ 0x3c
 80062a6:	3304      	adds	r3, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4a26      	ldr	r2, [pc, #152]	@ (8006348 <USB_EP0_OutStart+0xb8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d90a      	bls.n	80062ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062c4:	d101      	bne.n	80062ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e037      	b.n	800633a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d0:	461a      	mov	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062f8:	f043 0318 	orr.w	r3, r3, #24
 80062fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800630c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006310:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006312:	7afb      	ldrb	r3, [r7, #11]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d10f      	bne.n	8006338 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631e:	461a      	mov	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006332:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006336:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	4f54300a 	.word	0x4f54300a

0800634c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006364:	d901      	bls.n	800636a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e01b      	b.n	80063a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	daf2      	bge.n	8006358 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f043 0201 	orr.w	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800638e:	d901      	bls.n	8006394 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e006      	b.n	80063a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b01      	cmp	r3, #1
 800639e:	d0f0      	beq.n	8006382 <USB_CoreReset+0x36>

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80063bc:	2010      	movs	r0, #16
 80063be:	f002 f915 	bl	80085ec <USBD_static_malloc>
 80063c2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	32b0      	adds	r2, #176	@ 0xb0
 80063d4:	2100      	movs	r1, #0
 80063d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063da:	2302      	movs	r3, #2
 80063dc:	e048      	b.n	8006470 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	32b0      	adds	r2, #176	@ 0xb0
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	32b0      	adds	r2, #176	@ 0xb0
 80063f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	7c1b      	ldrb	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10d      	bne.n	8006426 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800640a:	4b1b      	ldr	r3, [pc, #108]	@ (8006478 <USBD_HID_Init+0xc8>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f003 020f 	and.w	r2, r3, #15
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	3326      	adds	r3, #38	@ 0x26
 8006420:	2207      	movs	r2, #7
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e00c      	b.n	8006440 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006426:	4b14      	ldr	r3, [pc, #80]	@ (8006478 <USBD_HID_Init+0xc8>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	3326      	adds	r3, #38	@ 0x26
 800643c:	220a      	movs	r2, #10
 800643e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006440:	4b0d      	ldr	r3, [pc, #52]	@ (8006478 <USBD_HID_Init+0xc8>)
 8006442:	7819      	ldrb	r1, [r3, #0]
 8006444:	2304      	movs	r3, #4
 8006446:	2203      	movs	r2, #3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 ffbe 	bl	80083ca <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800644e:	4b0a      	ldr	r3, [pc, #40]	@ (8006478 <USBD_HID_Init+0xc8>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f003 020f 	and.w	r2, r3, #15
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	3324      	adds	r3, #36	@ 0x24
 8006464:	2201      	movs	r2, #1
 8006466:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	200000bf 	.word	0x200000bf

0800647c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006488:	4b1f      	ldr	r3, [pc, #124]	@ (8006508 <USBD_HID_DeInit+0x8c>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 ffc1 	bl	8008416 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006494:	4b1c      	ldr	r3, [pc, #112]	@ (8006508 <USBD_HID_DeInit+0x8c>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	f003 020f 	and.w	r2, r3, #15
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	3324      	adds	r3, #36	@ 0x24
 80064aa:	2200      	movs	r2, #0
 80064ac:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80064ae:	4b16      	ldr	r3, [pc, #88]	@ (8006508 <USBD_HID_DeInit+0x8c>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f003 020f 	and.w	r2, r3, #15
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	3326      	adds	r3, #38	@ 0x26
 80064c4:	2200      	movs	r2, #0
 80064c6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	32b0      	adds	r2, #176	@ 0xb0
 80064d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d011      	beq.n	80064fe <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	32b0      	adds	r2, #176	@ 0xb0
 80064e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f002 f88d 	bl	8008608 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	32b0      	adds	r2, #176	@ 0xb0
 80064f8:	2100      	movs	r1, #0
 80064fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200000bf 	.word	0x200000bf

0800650c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	32b0      	adds	r2, #176	@ 0xb0
 8006520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006524:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006534:	2303      	movs	r3, #3
 8006536:	e0e8      	b.n	800670a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006540:	2b00      	cmp	r3, #0
 8006542:	d046      	beq.n	80065d2 <USBD_HID_Setup+0xc6>
 8006544:	2b20      	cmp	r3, #32
 8006546:	f040 80d8 	bne.w	80066fa <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	3b02      	subs	r3, #2
 8006550:	2b09      	cmp	r3, #9
 8006552:	d836      	bhi.n	80065c2 <USBD_HID_Setup+0xb6>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <USBD_HID_Setup+0x50>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	080065b3 	.word	0x080065b3
 8006560:	08006593 	.word	0x08006593
 8006564:	080065c3 	.word	0x080065c3
 8006568:	080065c3 	.word	0x080065c3
 800656c:	080065c3 	.word	0x080065c3
 8006570:	080065c3 	.word	0x080065c3
 8006574:	080065c3 	.word	0x080065c3
 8006578:	080065c3 	.word	0x080065c3
 800657c:	080065a1 	.word	0x080065a1
 8006580:	08006585 	.word	0x08006585
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	885b      	ldrh	r3, [r3, #2]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]
          break;
 8006590:	e01e      	b.n	80065d0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fbd9 	bl	8007d50 <USBD_CtlSendData>
          break;
 800659e:	e017      	b.n	80065d0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	885b      	ldrh	r3, [r3, #2]
 80065a4:	0a1b      	lsrs	r3, r3, #8
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	605a      	str	r2, [r3, #4]
          break;
 80065b0:	e00e      	b.n	80065d0 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3304      	adds	r3, #4
 80065b6:	2201      	movs	r2, #1
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fbc8 	bl	8007d50 <USBD_CtlSendData>
          break;
 80065c0:	e006      	b.n	80065d0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 fb52 	bl	8007c6e <USBD_CtlError>
          ret = USBD_FAIL;
 80065ca:	2303      	movs	r3, #3
 80065cc:	75fb      	strb	r3, [r7, #23]
          break;
 80065ce:	bf00      	nop
      }
      break;
 80065d0:	e09a      	b.n	8006708 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	2b0b      	cmp	r3, #11
 80065d8:	f200 8086 	bhi.w	80066e8 <USBD_HID_Setup+0x1dc>
 80065dc:	a201      	add	r2, pc, #4	@ (adr r2, 80065e4 <USBD_HID_Setup+0xd8>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006615 	.word	0x08006615
 80065e8:	080066f7 	.word	0x080066f7
 80065ec:	080066e9 	.word	0x080066e9
 80065f0:	080066e9 	.word	0x080066e9
 80065f4:	080066e9 	.word	0x080066e9
 80065f8:	080066e9 	.word	0x080066e9
 80065fc:	0800663f 	.word	0x0800663f
 8006600:	080066e9 	.word	0x080066e9
 8006604:	080066e9 	.word	0x080066e9
 8006608:	080066e9 	.word	0x080066e9
 800660c:	08006697 	.word	0x08006697
 8006610:	080066c1 	.word	0x080066c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b03      	cmp	r3, #3
 800661e:	d107      	bne.n	8006630 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006620:	f107 030a 	add.w	r3, r7, #10
 8006624:	2202      	movs	r2, #2
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fb91 	bl	8007d50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800662e:	e063      	b.n	80066f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fb1b 	bl	8007c6e <USBD_CtlError>
            ret = USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	75fb      	strb	r3, [r7, #23]
          break;
 800663c:	e05c      	b.n	80066f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	885b      	ldrh	r3, [r3, #2]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b22      	cmp	r3, #34	@ 0x22
 8006648:	d108      	bne.n	800665c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	88db      	ldrh	r3, [r3, #6]
 800664e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006650:	bf28      	it	cs
 8006652:	233f      	movcs	r3, #63	@ 0x3f
 8006654:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006656:	4b2f      	ldr	r3, [pc, #188]	@ (8006714 <USBD_HID_Setup+0x208>)
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	e015      	b.n	8006688 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	885b      	ldrh	r3, [r3, #2]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b21      	cmp	r3, #33	@ 0x21
 8006666:	d108      	bne.n	800667a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006668:	4b2b      	ldr	r3, [pc, #172]	@ (8006718 <USBD_HID_Setup+0x20c>)
 800666a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	88db      	ldrh	r3, [r3, #6]
 8006670:	2b09      	cmp	r3, #9
 8006672:	bf28      	it	cs
 8006674:	2309      	movcs	r3, #9
 8006676:	82bb      	strh	r3, [r7, #20]
 8006678:	e006      	b.n	8006688 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 faf6 	bl	8007c6e <USBD_CtlError>
            ret = USBD_FAIL;
 8006682:	2303      	movs	r3, #3
 8006684:	75fb      	strb	r3, [r7, #23]
            break;
 8006686:	e037      	b.n	80066f8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006688:	8abb      	ldrh	r3, [r7, #20]
 800668a:	461a      	mov	r2, r3
 800668c:	6939      	ldr	r1, [r7, #16]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fb5e 	bl	8007d50 <USBD_CtlSendData>
          break;
 8006694:	e030      	b.n	80066f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d107      	bne.n	80066b2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3308      	adds	r3, #8
 80066a6:	2201      	movs	r2, #1
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fb50 	bl	8007d50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066b0:	e022      	b.n	80066f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 fada 	bl	8007c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80066ba:	2303      	movs	r3, #3
 80066bc:	75fb      	strb	r3, [r7, #23]
          break;
 80066be:	e01b      	b.n	80066f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d106      	bne.n	80066da <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	885b      	ldrh	r3, [r3, #2]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066d8:	e00e      	b.n	80066f8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fac6 	bl	8007c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80066e2:	2303      	movs	r3, #3
 80066e4:	75fb      	strb	r3, [r7, #23]
          break;
 80066e6:	e007      	b.n	80066f8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fabf 	bl	8007c6e <USBD_CtlError>
          ret = USBD_FAIL;
 80066f0:	2303      	movs	r3, #3
 80066f2:	75fb      	strb	r3, [r7, #23]
          break;
 80066f4:	e000      	b.n	80066f8 <USBD_HID_Setup+0x1ec>
          break;
 80066f6:	bf00      	nop
      }
      break;
 80066f8:	e006      	b.n	8006708 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fab6 	bl	8007c6e <USBD_CtlError>
      ret = USBD_FAIL;
 8006702:	2303      	movs	r3, #3
 8006704:	75fb      	strb	r3, [r7, #23]
      break;
 8006706:	bf00      	nop
  }

  return (uint8_t)ret;
 8006708:	7dfb      	ldrb	r3, [r7, #23]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000080 	.word	0x20000080
 8006718:	20000068 	.word	0x20000068

0800671c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	32b0      	adds	r2, #176	@ 0xb0
 8006734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006738:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e014      	b.n	800676e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b03      	cmp	r3, #3
 800674e:	d10d      	bne.n	800676c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	7b1b      	ldrb	r3, [r3, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2201      	movs	r2, #1
 800675c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800675e:	4b06      	ldr	r3, [pc, #24]	@ (8006778 <USBD_HID_SendReport+0x5c>)
 8006760:	7819      	ldrb	r1, [r3, #0]
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f001 fefd 	bl	8008566 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200000bf 	.word	0x200000bf

0800677c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006784:	2181      	movs	r1, #129	@ 0x81
 8006786:	4809      	ldr	r0, [pc, #36]	@ (80067ac <USBD_HID_GetFSCfgDesc+0x30>)
 8006788:	f000 fc3b 	bl	8007002 <USBD_GetEpDesc>
 800678c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	220a      	movs	r2, #10
 8006798:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2222      	movs	r2, #34	@ 0x22
 800679e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80067a0:	4b02      	ldr	r3, [pc, #8]	@ (80067ac <USBD_HID_GetFSCfgDesc+0x30>)
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000044 	.word	0x20000044

080067b0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80067b8:	2181      	movs	r1, #129	@ 0x81
 80067ba:	4809      	ldr	r0, [pc, #36]	@ (80067e0 <USBD_HID_GetHSCfgDesc+0x30>)
 80067bc:	f000 fc21 	bl	8007002 <USBD_GetEpDesc>
 80067c0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2207      	movs	r2, #7
 80067cc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2222      	movs	r2, #34	@ 0x22
 80067d2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80067d4:	4b02      	ldr	r3, [pc, #8]	@ (80067e0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000044 	.word	0x20000044

080067e4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80067ec:	2181      	movs	r1, #129	@ 0x81
 80067ee:	4809      	ldr	r0, [pc, #36]	@ (8006814 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80067f0:	f000 fc07 	bl	8007002 <USBD_GetEpDesc>
 80067f4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	220a      	movs	r2, #10
 8006800:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2222      	movs	r2, #34	@ 0x22
 8006806:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006808:	4b02      	ldr	r3, [pc, #8]	@ (8006814 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000044 	.word	0x20000044

08006818 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	32b0      	adds	r2, #176	@ 0xb0
 800682e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006832:	2200      	movs	r2, #0
 8006834:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	220a      	movs	r2, #10
 8006850:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006852:	4b03      	ldr	r3, [pc, #12]	@ (8006860 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	20000074 	.word	0x20000074

08006864 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	4613      	mov	r3, r2
 8006870:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006878:	2303      	movs	r3, #3
 800687a:	e01f      	b.n	80068bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	79fa      	ldrb	r2, [r7, #7]
 80068ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f001 fd23 	bl	80082fc <USBD_LL_Init>
 80068b6:	4603      	mov	r3, r0
 80068b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068d8:	2303      	movs	r3, #3
 80068da:	e025      	b.n	8006928 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	32ae      	adds	r2, #174	@ 0xae
 80068ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00f      	beq.n	8006918 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	32ae      	adds	r2, #174	@ 0xae
 8006902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	f107 020e 	add.w	r2, r7, #14
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
 8006910:	4602      	mov	r2, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 fd2b 	bl	8008394 <USBD_LL_Start>
 800693e:	4603      	mov	r3, r0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d009      	beq.n	800698c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	78fa      	ldrb	r2, [r7, #3]
 8006982:	4611      	mov	r1, r2
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	78fa      	ldrb	r2, [r7, #3]
 80069b0:	4611      	mov	r1, r2
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069bc:	2303      	movs	r3, #3
 80069be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 f90c 	bl	8007bfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80069f0:	461a      	mov	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d01a      	beq.n	8006a3c <USBD_LL_SetupStage+0x72>
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d822      	bhi.n	8006a50 <USBD_LL_SetupStage+0x86>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <USBD_LL_SetupStage+0x4a>
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d00a      	beq.n	8006a28 <USBD_LL_SetupStage+0x5e>
 8006a12:	e01d      	b.n	8006a50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fb63 	bl	80070e8 <USBD_StdDevReq>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]
      break;
 8006a26:	e020      	b.n	8006a6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fbcb 	bl	80071cc <USBD_StdItfReq>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3a:	e016      	b.n	8006a6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fc2d 	bl	80072a4 <USBD_StdEPReq>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a4e:	e00c      	b.n	8006a6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 fcf8 	bl	8008454 <USBD_LL_StallEP>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]
      break;
 8006a68:	bf00      	nop
  }

  return ret;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a86:	7afb      	ldrb	r3, [r7, #11]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d16e      	bne.n	8006b6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	f040 8098 	bne.w	8006bd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d913      	bls.n	8006ad4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	1ad2      	subs	r2, r2, r3
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	bf28      	it	cs
 8006ac6:	4613      	movcs	r3, r2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f001 f96b 	bl	8007da8 <USBD_CtlContinueRx>
 8006ad2:	e07d      	b.n	8006bd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d014      	beq.n	8006b0c <USBD_LL_DataOutStage+0x98>
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d81d      	bhi.n	8006b22 <USBD_LL_DataOutStage+0xae>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <USBD_LL_DataOutStage+0x7c>
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d003      	beq.n	8006af6 <USBD_LL_DataOutStage+0x82>
 8006aee:	e018      	b.n	8006b22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	75bb      	strb	r3, [r7, #22]
            break;
 8006af4:	e018      	b.n	8006b28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fa64 	bl	8006fce <USBD_CoreFindIF>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75bb      	strb	r3, [r7, #22]
            break;
 8006b0a:	e00d      	b.n	8006b28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fa66 	bl	8006fe8 <USBD_CoreFindEP>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b20:	e002      	b.n	8006b28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	75bb      	strb	r3, [r7, #22]
            break;
 8006b26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b28:	7dbb      	ldrb	r3, [r7, #22]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d119      	bne.n	8006b62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d113      	bne.n	8006b62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b3a:	7dba      	ldrb	r2, [r7, #22]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	32ae      	adds	r2, #174	@ 0xae
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00b      	beq.n	8006b62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b4a:	7dba      	ldrb	r2, [r7, #22]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b52:	7dba      	ldrb	r2, [r7, #22]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	32ae      	adds	r2, #174	@ 0xae
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f001 f931 	bl	8007dca <USBD_CtlSendStatus>
 8006b68:	e032      	b.n	8006bd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	4619      	mov	r1, r3
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fa37 	bl	8006fe8 <USBD_CoreFindEP>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b7e:	7dbb      	ldrb	r3, [r7, #22]
 8006b80:	2bff      	cmp	r3, #255	@ 0xff
 8006b82:	d025      	beq.n	8006bd0 <USBD_LL_DataOutStage+0x15c>
 8006b84:	7dbb      	ldrb	r3, [r7, #22]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d122      	bne.n	8006bd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d117      	bne.n	8006bc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b96:	7dba      	ldrb	r2, [r7, #22]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	32ae      	adds	r2, #174	@ 0xae
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00f      	beq.n	8006bc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006ba6:	7dba      	ldrb	r2, [r7, #22]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bae:	7dba      	ldrb	r2, [r7, #22]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	32ae      	adds	r2, #174	@ 0xae
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	7afa      	ldrb	r2, [r7, #11]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	4798      	blx	r3
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	e000      	b.n	8006bd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	460b      	mov	r3, r1
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d16f      	bne.n	8006cce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3314      	adds	r3, #20
 8006bf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d15a      	bne.n	8006cb4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d914      	bls.n	8006c34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f001 f8b0 	bl	8007d86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c26:	2300      	movs	r3, #0
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f001 fcbb 	bl	80085a8 <USBD_LL_PrepareReceive>
 8006c32:	e03f      	b.n	8006cb4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d11c      	bne.n	8006c7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d316      	bcc.n	8006c7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d20f      	bcs.n	8006c7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f001 f891 	bl	8007d86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2100      	movs	r1, #0
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f001 fc98 	bl	80085a8 <USBD_LL_PrepareReceive>
 8006c78:	e01c      	b.n	8006cb4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d10f      	bne.n	8006ca6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ca6:	2180      	movs	r1, #128	@ 0x80
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f001 fbd3 	bl	8008454 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f001 f89e 	bl	8007df0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d03a      	beq.n	8006d34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7ff fe42 	bl	8006948 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ccc:	e032      	b.n	8006d34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 f985 	bl	8006fe8 <USBD_CoreFindEP>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	2bff      	cmp	r3, #255	@ 0xff
 8006ce6:	d025      	beq.n	8006d34 <USBD_LL_DataInStage+0x15a>
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d122      	bne.n	8006d34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d11c      	bne.n	8006d34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006cfa:	7dfa      	ldrb	r2, [r7, #23]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	32ae      	adds	r2, #174	@ 0xae
 8006d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d014      	beq.n	8006d34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d0a:	7dfa      	ldrb	r2, [r7, #23]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d12:	7dfa      	ldrb	r2, [r7, #23]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	32ae      	adds	r2, #174	@ 0xae
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	7afa      	ldrb	r2, [r7, #11]
 8006d20:	4611      	mov	r1, r2
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	4798      	blx	r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d2a:	7dbb      	ldrb	r3, [r7, #22]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d30:	7dbb      	ldrb	r3, [r7, #22]
 8006d32:	e000      	b.n	8006d36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d014      	beq.n	8006da4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00e      	beq.n	8006da4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6852      	ldr	r2, [r2, #4]
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	4611      	mov	r1, r2
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006da0:	2303      	movs	r3, #3
 8006da2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006da4:	2340      	movs	r3, #64	@ 0x40
 8006da6:	2200      	movs	r2, #0
 8006da8:	2100      	movs	r1, #0
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 fb0d 	bl	80083ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2240      	movs	r2, #64	@ 0x40
 8006dbc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dc0:	2340      	movs	r3, #64	@ 0x40
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2180      	movs	r1, #128	@ 0x80
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 faff 	bl	80083ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2240      	movs	r2, #64	@ 0x40
 8006dd6:	621a      	str	r2, [r3, #32]

  return ret;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d006      	beq.n	8006e24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2204      	movs	r2, #4
 8006e28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d106      	bne.n	8006e5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d110      	bne.n	8006ea0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b082      	sub	sp, #8
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	32ae      	adds	r2, #174	@ 0xae
 8006ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e01c      	b.n	8006f06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d115      	bne.n	8006f04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32ae      	adds	r2, #174	@ 0xae
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	32ae      	adds	r2, #174	@ 0xae
 8006ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	4611      	mov	r1, r2
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	32ae      	adds	r2, #174	@ 0xae
 8006f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e01c      	b.n	8006f6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d115      	bne.n	8006f68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	32ae      	adds	r2, #174	@ 0xae
 8006f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	32ae      	adds	r2, #174	@ 0xae
 8006f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	4611      	mov	r1, r2
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00e      	beq.n	8006fc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6852      	ldr	r2, [r2, #4]
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ff4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b086      	sub	sp, #24
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	885b      	ldrh	r3, [r3, #2]
 800701e:	b29b      	uxth	r3, r3
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	4293      	cmp	r3, r2
 8007026:	d91f      	bls.n	8007068 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800702e:	e013      	b.n	8007058 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007030:	f107 030a 	add.w	r3, r7, #10
 8007034:	4619      	mov	r1, r3
 8007036:	6978      	ldr	r0, [r7, #20]
 8007038:	f000 f81b 	bl	8007072 <USBD_GetNextDesc>
 800703c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	2b05      	cmp	r3, #5
 8007044:	d108      	bne.n	8007058 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	789b      	ldrb	r3, [r3, #2]
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	429a      	cmp	r2, r3
 8007052:	d008      	beq.n	8007066 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	885b      	ldrh	r3, [r3, #2]
 800705c:	b29a      	uxth	r2, r3
 800705e:	897b      	ldrh	r3, [r7, #10]
 8007060:	429a      	cmp	r2, r3
 8007062:	d8e5      	bhi.n	8007030 <USBD_GetEpDesc+0x2e>
 8007064:	e000      	b.n	8007068 <USBD_GetEpDesc+0x66>
          break;
 8007066:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007068:	693b      	ldr	r3, [r7, #16]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	7812      	ldrb	r2, [r2, #0]
 8007088:	4413      	add	r3, r2
 800708a:	b29a      	uxth	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4413      	add	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800709c:	68fb      	ldr	r3, [r7, #12]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3301      	adds	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070c8:	8a3b      	ldrh	r3, [r7, #16]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	b21a      	sxth	r2, r3
 80070ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	b21b      	sxth	r3, r3
 80070d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070d8:	89fb      	ldrh	r3, [r7, #14]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	d005      	beq.n	800710e <USBD_StdDevReq+0x26>
 8007102:	2b40      	cmp	r3, #64	@ 0x40
 8007104:	d857      	bhi.n	80071b6 <USBD_StdDevReq+0xce>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00f      	beq.n	800712a <USBD_StdDevReq+0x42>
 800710a:	2b20      	cmp	r3, #32
 800710c:	d153      	bne.n	80071b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	32ae      	adds	r2, #174	@ 0xae
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	4798      	blx	r3
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e04a      	b.n	80071c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	2b09      	cmp	r3, #9
 8007130:	d83b      	bhi.n	80071aa <USBD_StdDevReq+0xc2>
 8007132:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <USBD_StdDevReq+0x50>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	0800718d 	.word	0x0800718d
 800713c:	080071a1 	.word	0x080071a1
 8007140:	080071ab 	.word	0x080071ab
 8007144:	08007197 	.word	0x08007197
 8007148:	080071ab 	.word	0x080071ab
 800714c:	0800716b 	.word	0x0800716b
 8007150:	08007161 	.word	0x08007161
 8007154:	080071ab 	.word	0x080071ab
 8007158:	08007183 	.word	0x08007183
 800715c:	08007175 	.word	0x08007175
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa3c 	bl	80075e0 <USBD_GetDescriptor>
          break;
 8007168:	e024      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fba1 	bl	80078b4 <USBD_SetAddress>
          break;
 8007172:	e01f      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fbe0 	bl	800793c <USBD_SetConfig>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
          break;
 8007180:	e018      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc83 	bl	8007a90 <USBD_GetConfig>
          break;
 800718a:	e013      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fcb4 	bl	8007afc <USBD_GetStatus>
          break;
 8007194:	e00e      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fce3 	bl	8007b64 <USBD_SetFeature>
          break;
 800719e:	e009      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fd07 	bl	8007bb6 <USBD_ClrFeature>
          break;
 80071a8:	e004      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fd5e 	bl	8007c6e <USBD_CtlError>
          break;
 80071b2:	bf00      	nop
      }
      break;
 80071b4:	e004      	b.n	80071c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fd58 	bl	8007c6e <USBD_CtlError>
      break;
 80071be:	bf00      	nop
  }

  return ret;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop

080071cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071e2:	2b40      	cmp	r3, #64	@ 0x40
 80071e4:	d005      	beq.n	80071f2 <USBD_StdItfReq+0x26>
 80071e6:	2b40      	cmp	r3, #64	@ 0x40
 80071e8:	d852      	bhi.n	8007290 <USBD_StdItfReq+0xc4>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <USBD_StdItfReq+0x26>
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d14e      	bne.n	8007290 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d840      	bhi.n	8007282 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	889b      	ldrh	r3, [r3, #4]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d836      	bhi.n	8007278 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	889b      	ldrh	r3, [r3, #4]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fedb 	bl	8006fce <USBD_CoreFindIF>
 8007218:	4603      	mov	r3, r0
 800721a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2bff      	cmp	r3, #255	@ 0xff
 8007220:	d01d      	beq.n	800725e <USBD_StdItfReq+0x92>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d11a      	bne.n	800725e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007228:	7bba      	ldrb	r2, [r7, #14]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32ae      	adds	r2, #174	@ 0xae
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00f      	beq.n	8007258 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007238:	7bba      	ldrb	r2, [r7, #14]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007240:	7bba      	ldrb	r2, [r7, #14]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32ae      	adds	r2, #174	@ 0xae
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
 8007252:	4603      	mov	r3, r0
 8007254:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007256:	e004      	b.n	8007262 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007258:	2303      	movs	r3, #3
 800725a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800725c:	e001      	b.n	8007262 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800725e:	2303      	movs	r3, #3
 8007260:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88db      	ldrh	r3, [r3, #6]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d110      	bne.n	800728c <USBD_StdItfReq+0xc0>
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10d      	bne.n	800728c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fdaa 	bl	8007dca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007276:	e009      	b.n	800728c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fcf7 	bl	8007c6e <USBD_CtlError>
          break;
 8007280:	e004      	b.n	800728c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fcf2 	bl	8007c6e <USBD_CtlError>
          break;
 800728a:	e000      	b.n	800728e <USBD_StdItfReq+0xc2>
          break;
 800728c:	bf00      	nop
      }
      break;
 800728e:	e004      	b.n	800729a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fceb 	bl	8007c6e <USBD_CtlError>
      break;
 8007298:	bf00      	nop
  }

  return ret;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	889b      	ldrh	r3, [r3, #4]
 80072b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072c0:	2b40      	cmp	r3, #64	@ 0x40
 80072c2:	d007      	beq.n	80072d4 <USBD_StdEPReq+0x30>
 80072c4:	2b40      	cmp	r3, #64	@ 0x40
 80072c6:	f200 817f 	bhi.w	80075c8 <USBD_StdEPReq+0x324>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d02a      	beq.n	8007324 <USBD_StdEPReq+0x80>
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	f040 817a 	bne.w	80075c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fe85 	bl	8006fe8 <USBD_CoreFindEP>
 80072de:	4603      	mov	r3, r0
 80072e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072e2:	7b7b      	ldrb	r3, [r7, #13]
 80072e4:	2bff      	cmp	r3, #255	@ 0xff
 80072e6:	f000 8174 	beq.w	80075d2 <USBD_StdEPReq+0x32e>
 80072ea:	7b7b      	ldrb	r3, [r7, #13]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8170 	bne.w	80075d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072f2:	7b7a      	ldrb	r2, [r7, #13]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072fa:	7b7a      	ldrb	r2, [r7, #13]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	32ae      	adds	r2, #174	@ 0xae
 8007300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8163 	beq.w	80075d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800730c:	7b7a      	ldrb	r2, [r7, #13]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	32ae      	adds	r2, #174	@ 0xae
 8007312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007322:	e156      	b.n	80075d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b03      	cmp	r3, #3
 800732a:	d008      	beq.n	800733e <USBD_StdEPReq+0x9a>
 800732c:	2b03      	cmp	r3, #3
 800732e:	f300 8145 	bgt.w	80075bc <USBD_StdEPReq+0x318>
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 809b 	beq.w	800746e <USBD_StdEPReq+0x1ca>
 8007338:	2b01      	cmp	r3, #1
 800733a:	d03c      	beq.n	80073b6 <USBD_StdEPReq+0x112>
 800733c:	e13e      	b.n	80075bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d002      	beq.n	8007350 <USBD_StdEPReq+0xac>
 800734a:	2b03      	cmp	r3, #3
 800734c:	d016      	beq.n	800737c <USBD_StdEPReq+0xd8>
 800734e:	e02c      	b.n	80073aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00d      	beq.n	8007372 <USBD_StdEPReq+0xce>
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b80      	cmp	r3, #128	@ 0x80
 800735a:	d00a      	beq.n	8007372 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f877 	bl	8008454 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007366:	2180      	movs	r1, #128	@ 0x80
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 f873 	bl	8008454 <USBD_LL_StallEP>
 800736e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007370:	e020      	b.n	80073b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fc7a 	bl	8007c6e <USBD_CtlError>
              break;
 800737a:	e01b      	b.n	80073b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	885b      	ldrh	r3, [r3, #2]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10e      	bne.n	80073a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <USBD_StdEPReq+0xfe>
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b80      	cmp	r3, #128	@ 0x80
 800738e:	d008      	beq.n	80073a2 <USBD_StdEPReq+0xfe>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	88db      	ldrh	r3, [r3, #6]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 f859 	bl	8008454 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fd11 	bl	8007dca <USBD_CtlSendStatus>

              break;
 80073a8:	e004      	b.n	80073b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fc5e 	bl	8007c6e <USBD_CtlError>
              break;
 80073b2:	bf00      	nop
          }
          break;
 80073b4:	e107      	b.n	80075c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d002      	beq.n	80073c8 <USBD_StdEPReq+0x124>
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d016      	beq.n	80073f4 <USBD_StdEPReq+0x150>
 80073c6:	e04b      	b.n	8007460 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <USBD_StdEPReq+0x146>
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b80      	cmp	r3, #128	@ 0x80
 80073d2:	d00a      	beq.n	80073ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 f83b 	bl	8008454 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073de:	2180      	movs	r1, #128	@ 0x80
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 f837 	bl	8008454 <USBD_LL_StallEP>
 80073e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073e8:	e040      	b.n	800746c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fc3e 	bl	8007c6e <USBD_CtlError>
              break;
 80073f2:	e03b      	b.n	800746c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	885b      	ldrh	r3, [r3, #2]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d136      	bne.n	800746a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 f841 	bl	8008492 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fcda 	bl	8007dca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fde4 	bl	8006fe8 <USBD_CoreFindEP>
 8007420:	4603      	mov	r3, r0
 8007422:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007424:	7b7b      	ldrb	r3, [r7, #13]
 8007426:	2bff      	cmp	r3, #255	@ 0xff
 8007428:	d01f      	beq.n	800746a <USBD_StdEPReq+0x1c6>
 800742a:	7b7b      	ldrb	r3, [r7, #13]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d11c      	bne.n	800746a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007430:	7b7a      	ldrb	r2, [r7, #13]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007438:	7b7a      	ldrb	r2, [r7, #13]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	32ae      	adds	r2, #174	@ 0xae
 800743e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d010      	beq.n	800746a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007448:	7b7a      	ldrb	r2, [r7, #13]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	32ae      	adds	r2, #174	@ 0xae
 800744e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800745e:	e004      	b.n	800746a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fc03 	bl	8007c6e <USBD_CtlError>
              break;
 8007468:	e000      	b.n	800746c <USBD_StdEPReq+0x1c8>
              break;
 800746a:	bf00      	nop
          }
          break;
 800746c:	e0ab      	b.n	80075c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d002      	beq.n	8007480 <USBD_StdEPReq+0x1dc>
 800747a:	2b03      	cmp	r3, #3
 800747c:	d032      	beq.n	80074e4 <USBD_StdEPReq+0x240>
 800747e:	e097      	b.n	80075b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <USBD_StdEPReq+0x1f2>
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b80      	cmp	r3, #128	@ 0x80
 800748a:	d004      	beq.n	8007496 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fbed 	bl	8007c6e <USBD_CtlError>
                break;
 8007494:	e091      	b.n	80075ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800749a:	2b00      	cmp	r3, #0
 800749c:	da0b      	bge.n	80074b6 <USBD_StdEPReq+0x212>
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	3310      	adds	r3, #16
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	3304      	adds	r3, #4
 80074b4:	e00b      	b.n	80074ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	4413      	add	r3, r2
 80074cc:	3304      	adds	r3, #4
 80074ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2202      	movs	r2, #2
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fc37 	bl	8007d50 <USBD_CtlSendData>
              break;
 80074e2:	e06a      	b.n	80075ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da11      	bge.n	8007510 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	f003 020f 	and.w	r2, r3, #15
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	3324      	adds	r3, #36	@ 0x24
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d117      	bne.n	8007536 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fbb0 	bl	8007c6e <USBD_CtlError>
                  break;
 800750e:	e054      	b.n	80075ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 020f 	and.w	r2, r3, #15
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fb9d 	bl	8007c6e <USBD_CtlError>
                  break;
 8007534:	e041      	b.n	80075ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800753a:	2b00      	cmp	r3, #0
 800753c:	da0b      	bge.n	8007556 <USBD_StdEPReq+0x2b2>
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	3310      	adds	r3, #16
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	3304      	adds	r3, #4
 8007554:	e00b      	b.n	800756e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	3304      	adds	r3, #4
 800756e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <USBD_StdEPReq+0x2d8>
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b80      	cmp	r3, #128	@ 0x80
 800757a:	d103      	bne.n	8007584 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e00e      	b.n	80075a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 ffa1 	bl	80084d0 <USBD_LL_IsStallEP>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	e002      	b.n	80075a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2202      	movs	r2, #2
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fbd1 	bl	8007d50 <USBD_CtlSendData>
              break;
 80075ae:	e004      	b.n	80075ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb5b 	bl	8007c6e <USBD_CtlError>
              break;
 80075b8:	bf00      	nop
          }
          break;
 80075ba:	e004      	b.n	80075c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fb55 	bl	8007c6e <USBD_CtlError>
          break;
 80075c4:	bf00      	nop
      }
      break;
 80075c6:	e005      	b.n	80075d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb4f 	bl	8007c6e <USBD_CtlError>
      break;
 80075d0:	e000      	b.n	80075d4 <USBD_StdEPReq+0x330>
      break;
 80075d2:	bf00      	nop
  }

  return ret;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	885b      	ldrh	r3, [r3, #2]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b06      	cmp	r3, #6
 8007602:	f200 8128 	bhi.w	8007856 <USBD_GetDescriptor+0x276>
 8007606:	a201      	add	r2, pc, #4	@ (adr r2, 800760c <USBD_GetDescriptor+0x2c>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007629 	.word	0x08007629
 8007610:	08007641 	.word	0x08007641
 8007614:	08007681 	.word	0x08007681
 8007618:	08007857 	.word	0x08007857
 800761c:	08007857 	.word	0x08007857
 8007620:	080077f7 	.word	0x080077f7
 8007624:	08007823 	.word	0x08007823
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	7c12      	ldrb	r2, [r2, #16]
 8007634:	f107 0108 	add.w	r1, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
      break;
 800763e:	e112      	b.n	8007866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	7c1b      	ldrb	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10d      	bne.n	8007664 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	f107 0208 	add.w	r2, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	2202      	movs	r2, #2
 8007660:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007662:	e100      	b.n	8007866 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	f107 0208 	add.w	r2, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	2202      	movs	r2, #2
 800767c:	701a      	strb	r2, [r3, #0]
      break;
 800767e:	e0f2      	b.n	8007866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	885b      	ldrh	r3, [r3, #2]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b05      	cmp	r3, #5
 8007688:	f200 80ac 	bhi.w	80077e4 <USBD_GetDescriptor+0x204>
 800768c:	a201      	add	r2, pc, #4	@ (adr r2, 8007694 <USBD_GetDescriptor+0xb4>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076ad 	.word	0x080076ad
 8007698:	080076e1 	.word	0x080076e1
 800769c:	08007715 	.word	0x08007715
 80076a0:	08007749 	.word	0x08007749
 80076a4:	0800777d 	.word	0x0800777d
 80076a8:	080077b1 	.word	0x080077b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	7c12      	ldrb	r2, [r2, #16]
 80076c4:	f107 0108 	add.w	r1, r7, #8
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
 80076cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ce:	e091      	b.n	80077f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 facb 	bl	8007c6e <USBD_CtlError>
            err++;
 80076d8:	7afb      	ldrb	r3, [r7, #11]
 80076da:	3301      	adds	r3, #1
 80076dc:	72fb      	strb	r3, [r7, #11]
          break;
 80076de:	e089      	b.n	80077f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
 80076f8:	f107 0108 	add.w	r1, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007702:	e077      	b.n	80077f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fab1 	bl	8007c6e <USBD_CtlError>
            err++;
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	3301      	adds	r3, #1
 8007710:	72fb      	strb	r3, [r7, #11]
          break;
 8007712:	e06f      	b.n	80077f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00b      	beq.n	8007738 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	7c12      	ldrb	r2, [r2, #16]
 800772c:	f107 0108 	add.w	r1, r7, #8
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
 8007734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007736:	e05d      	b.n	80077f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa97 	bl	8007c6e <USBD_CtlError>
            err++;
 8007740:	7afb      	ldrb	r3, [r7, #11]
 8007742:	3301      	adds	r3, #1
 8007744:	72fb      	strb	r3, [r7, #11]
          break;
 8007746:	e055      	b.n	80077f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	7c12      	ldrb	r2, [r2, #16]
 8007760:	f107 0108 	add.w	r1, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800776a:	e043      	b.n	80077f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa7d 	bl	8007c6e <USBD_CtlError>
            err++;
 8007774:	7afb      	ldrb	r3, [r7, #11]
 8007776:	3301      	adds	r3, #1
 8007778:	72fb      	strb	r3, [r7, #11]
          break;
 800777a:	e03b      	b.n	80077f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	7c12      	ldrb	r2, [r2, #16]
 8007794:	f107 0108 	add.w	r1, r7, #8
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779e:	e029      	b.n	80077f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa63 	bl	8007c6e <USBD_CtlError>
            err++;
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	3301      	adds	r3, #1
 80077ac:	72fb      	strb	r3, [r7, #11]
          break;
 80077ae:	e021      	b.n	80077f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077d2:	e00f      	b.n	80077f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa49 	bl	8007c6e <USBD_CtlError>
            err++;
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	3301      	adds	r3, #1
 80077e0:	72fb      	strb	r3, [r7, #11]
          break;
 80077e2:	e007      	b.n	80077f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa41 	bl	8007c6e <USBD_CtlError>
          err++;
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	3301      	adds	r3, #1
 80077f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80077f2:	bf00      	nop
      }
      break;
 80077f4:	e037      	b.n	8007866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7c1b      	ldrb	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007806:	f107 0208 	add.w	r2, r7, #8
 800780a:	4610      	mov	r0, r2
 800780c:	4798      	blx	r3
 800780e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007810:	e029      	b.n	8007866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fa2a 	bl	8007c6e <USBD_CtlError>
        err++;
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	3301      	adds	r3, #1
 800781e:	72fb      	strb	r3, [r7, #11]
      break;
 8007820:	e021      	b.n	8007866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	7c1b      	ldrb	r3, [r3, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007832:	f107 0208 	add.w	r2, r7, #8
 8007836:	4610      	mov	r0, r2
 8007838:	4798      	blx	r3
 800783a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3301      	adds	r3, #1
 8007840:	2207      	movs	r2, #7
 8007842:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007844:	e00f      	b.n	8007866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa10 	bl	8007c6e <USBD_CtlError>
        err++;
 800784e:	7afb      	ldrb	r3, [r7, #11]
 8007850:	3301      	adds	r3, #1
 8007852:	72fb      	strb	r3, [r7, #11]
      break;
 8007854:	e007      	b.n	8007866 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fa08 	bl	8007c6e <USBD_CtlError>
      err++;
 800785e:	7afb      	ldrb	r3, [r7, #11]
 8007860:	3301      	adds	r3, #1
 8007862:	72fb      	strb	r3, [r7, #11]
      break;
 8007864:	bf00      	nop
  }

  if (err != 0U)
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d11e      	bne.n	80078aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	88db      	ldrh	r3, [r3, #6]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d016      	beq.n	80078a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007874:	893b      	ldrh	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00e      	beq.n	8007898 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88da      	ldrh	r2, [r3, #6]
 800787e:	893b      	ldrh	r3, [r7, #8]
 8007880:	4293      	cmp	r3, r2
 8007882:	bf28      	it	cs
 8007884:	4613      	movcs	r3, r2
 8007886:	b29b      	uxth	r3, r3
 8007888:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800788a:	893b      	ldrh	r3, [r7, #8]
 800788c:	461a      	mov	r2, r3
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fa5d 	bl	8007d50 <USBD_CtlSendData>
 8007896:	e009      	b.n	80078ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f9e7 	bl	8007c6e <USBD_CtlError>
 80078a0:	e004      	b.n	80078ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa91 	bl	8007dca <USBD_CtlSendStatus>
 80078a8:	e000      	b.n	80078ac <USBD_GetDescriptor+0x2cc>
    return;
 80078aa:	bf00      	nop
  }
}
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop

080078b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	889b      	ldrh	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d131      	bne.n	800792a <USBD_SetAddress+0x76>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	88db      	ldrh	r3, [r3, #6]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d12d      	bne.n	800792a <USBD_SetAddress+0x76>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80078d4:	d829      	bhi.n	800792a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	885b      	ldrh	r3, [r3, #2]
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d104      	bne.n	80078f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f9bc 	bl	8007c6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	e01d      	b.n	8007934 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	7bfa      	ldrb	r2, [r7, #15]
 80078fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fe0f 	bl	8008528 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fa5d 	bl	8007dca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2202      	movs	r2, #2
 800791a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	e009      	b.n	8007934 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007928:	e004      	b.n	8007934 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f99e 	bl	8007c6e <USBD_CtlError>
  }
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	b2da      	uxtb	r2, r3
 8007950:	4b4e      	ldr	r3, [pc, #312]	@ (8007a8c <USBD_SetConfig+0x150>)
 8007952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007954:	4b4d      	ldr	r3, [pc, #308]	@ (8007a8c <USBD_SetConfig+0x150>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d905      	bls.n	8007968 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f985 	bl	8007c6e <USBD_CtlError>
    return USBD_FAIL;
 8007964:	2303      	movs	r3, #3
 8007966:	e08c      	b.n	8007a82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d002      	beq.n	800797a <USBD_SetConfig+0x3e>
 8007974:	2b03      	cmp	r3, #3
 8007976:	d029      	beq.n	80079cc <USBD_SetConfig+0x90>
 8007978:	e075      	b.n	8007a66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800797a:	4b44      	ldr	r3, [pc, #272]	@ (8007a8c <USBD_SetConfig+0x150>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d020      	beq.n	80079c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007982:	4b42      	ldr	r3, [pc, #264]	@ (8007a8c <USBD_SetConfig+0x150>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800798c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a8c <USBD_SetConfig+0x150>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7fe ffe3 	bl	800695e <USBD_SetClassConfig>
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d008      	beq.n	80079b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f962 	bl	8007c6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079b2:	e065      	b.n	8007a80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fa08 	bl	8007dca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2203      	movs	r2, #3
 80079be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079c2:	e05d      	b.n	8007a80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fa00 	bl	8007dca <USBD_CtlSendStatus>
      break;
 80079ca:	e059      	b.n	8007a80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079cc:	4b2f      	ldr	r3, [pc, #188]	@ (8007a8c <USBD_SetConfig+0x150>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d112      	bne.n	80079fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80079dc:	4b2b      	ldr	r3, [pc, #172]	@ (8007a8c <USBD_SetConfig+0x150>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079e6:	4b29      	ldr	r3, [pc, #164]	@ (8007a8c <USBD_SetConfig+0x150>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7fe ffd2 	bl	8006996 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9e9 	bl	8007dca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079f8:	e042      	b.n	8007a80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80079fa:	4b24      	ldr	r3, [pc, #144]	@ (8007a8c <USBD_SetConfig+0x150>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d02a      	beq.n	8007a5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fe ffc0 	bl	8006996 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a16:	4b1d      	ldr	r3, [pc, #116]	@ (8007a8c <USBD_SetConfig+0x150>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a20:	4b1a      	ldr	r3, [pc, #104]	@ (8007a8c <USBD_SetConfig+0x150>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fe ff99 	bl	800695e <USBD_SetClassConfig>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00f      	beq.n	8007a56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f918 	bl	8007c6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fe ffa5 	bl	8006996 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a54:	e014      	b.n	8007a80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f9b7 	bl	8007dca <USBD_CtlSendStatus>
      break;
 8007a5c:	e010      	b.n	8007a80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f9b3 	bl	8007dca <USBD_CtlSendStatus>
      break;
 8007a64:	e00c      	b.n	8007a80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f900 	bl	8007c6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a6e:	4b07      	ldr	r3, [pc, #28]	@ (8007a8c <USBD_SetConfig+0x150>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fe ff8e 	bl	8006996 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7e:	bf00      	nop
  }

  return ret;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	2000030c 	.word	0x2000030c

08007a90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	88db      	ldrh	r3, [r3, #6]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d004      	beq.n	8007aac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8e2 	bl	8007c6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007aaa:	e023      	b.n	8007af4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	dc02      	bgt.n	8007abe <USBD_GetConfig+0x2e>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	dc03      	bgt.n	8007ac4 <USBD_GetConfig+0x34>
 8007abc:	e015      	b.n	8007aea <USBD_GetConfig+0x5a>
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d00b      	beq.n	8007ada <USBD_GetConfig+0x4a>
 8007ac2:	e012      	b.n	8007aea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3308      	adds	r3, #8
 8007ace:	2201      	movs	r2, #1
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f93c 	bl	8007d50 <USBD_CtlSendData>
        break;
 8007ad8:	e00c      	b.n	8007af4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3304      	adds	r3, #4
 8007ade:	2201      	movs	r2, #1
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f934 	bl	8007d50 <USBD_CtlSendData>
        break;
 8007ae8:	e004      	b.n	8007af4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8be 	bl	8007c6e <USBD_CtlError>
        break;
 8007af2:	bf00      	nop
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d81e      	bhi.n	8007b52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	88db      	ldrh	r3, [r3, #6]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d004      	beq.n	8007b26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f8a5 	bl	8007c6e <USBD_CtlError>
        break;
 8007b24:	e01a      	b.n	8007b5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f043 0202 	orr.w	r2, r3, #2
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	330c      	adds	r3, #12
 8007b46:	2202      	movs	r2, #2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f900 	bl	8007d50 <USBD_CtlSendData>
      break;
 8007b50:	e004      	b.n	8007b5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f88a 	bl	8007c6e <USBD_CtlError>
      break;
 8007b5a:	bf00      	nop
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	885b      	ldrh	r3, [r3, #2]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d107      	bne.n	8007b86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f923 	bl	8007dca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b84:	e013      	b.n	8007bae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d10b      	bne.n	8007ba6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	889b      	ldrh	r3, [r3, #4]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f913 	bl	8007dca <USBD_CtlSendStatus>
}
 8007ba4:	e003      	b.n	8007bae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f860 	bl	8007c6e <USBD_CtlError>
}
 8007bae:	bf00      	nop
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d80b      	bhi.n	8007be6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d10c      	bne.n	8007bf0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8f3 	bl	8007dca <USBD_CtlSendStatus>
      }
      break;
 8007be4:	e004      	b.n	8007bf0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f840 	bl	8007c6e <USBD_CtlError>
      break;
 8007bee:	e000      	b.n	8007bf2 <USBD_ClrFeature+0x3c>
      break;
 8007bf0:	bf00      	nop
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	781a      	ldrb	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	781a      	ldrb	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3301      	adds	r3, #1
 8007c22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fa40 	bl	80070aa <SWAPBYTE>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff fa33 	bl	80070aa <SWAPBYTE>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3301      	adds	r3, #1
 8007c56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7ff fa26 	bl	80070aa <SWAPBYTE>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	461a      	mov	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	80da      	strh	r2, [r3, #6]
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c78:	2180      	movs	r1, #128	@ 0x80
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fbea 	bl	8008454 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c80:	2100      	movs	r1, #0
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fbe6 	bl	8008454 <USBD_LL_StallEP>
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d036      	beq.n	8007d14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007caa:	6938      	ldr	r0, [r7, #16]
 8007cac:	f000 f836 	bl	8007d1c <USBD_GetLen>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7812      	ldrb	r2, [r2, #0]
 8007cc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ce0:	e013      	b.n	8007d0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	7812      	ldrb	r2, [r2, #0]
 8007cec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	613b      	str	r3, [r7, #16]
    idx++;
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	4413      	add	r3, r2
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	3301      	adds	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e7      	bne.n	8007ce2 <USBD_GetString+0x52>
 8007d12:	e000      	b.n	8007d16 <USBD_GetString+0x86>
    return;
 8007d14:	bf00      	nop
  }
}
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d2c:	e005      	b.n	8007d3a <USBD_GetLen+0x1e>
  {
    len++;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	3301      	adds	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1f5      	bne.n	8007d2e <USBD_GetLen+0x12>
  }

  return len;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	2100      	movs	r1, #0
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fbf5 	bl	8008566 <USBD_LL_Transmit>

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	2100      	movs	r1, #0
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fbe4 	bl	8008566 <USBD_LL_Transmit>

  return USBD_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fbf4 	bl	80085a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2100      	movs	r1, #0
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fbc0 	bl	8008566 <USBD_LL_Transmit>

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2205      	movs	r2, #5
 8007dfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e00:	2300      	movs	r3, #0
 8007e02:	2200      	movs	r2, #0
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fbce 	bl	80085a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	490e      	ldr	r1, [pc, #56]	@ (8007e58 <MX_USB_DEVICE_Init+0x40>)
 8007e20:	480e      	ldr	r0, [pc, #56]	@ (8007e5c <MX_USB_DEVICE_Init+0x44>)
 8007e22:	f7fe fd1f 	bl	8006864 <USBD_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e2c:	f7f8 fe76 	bl	8000b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007e30:	490b      	ldr	r1, [pc, #44]	@ (8007e60 <MX_USB_DEVICE_Init+0x48>)
 8007e32:	480a      	ldr	r0, [pc, #40]	@ (8007e5c <MX_USB_DEVICE_Init+0x44>)
 8007e34:	f7fe fd46 	bl	80068c4 <USBD_RegisterClass>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e3e:	f7f8 fe6d 	bl	8000b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e42:	4806      	ldr	r0, [pc, #24]	@ (8007e5c <MX_USB_DEVICE_Init+0x44>)
 8007e44:	f7fe fd74 	bl	8006930 <USBD_Start>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007e4e:	f7f8 fe65 	bl	8000b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e52:	bf00      	nop
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	200000c0 	.word	0x200000c0
 8007e5c:	20000310 	.word	0x20000310
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2212      	movs	r2, #18
 8007e74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e76:	4b03      	ldr	r3, [pc, #12]	@ (8007e84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	200000dc 	.word	0x200000dc

08007e88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2204      	movs	r2, #4
 8007e98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e9a:	4b03      	ldr	r3, [pc, #12]	@ (8007ea8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	200000f0 	.word	0x200000f0

08007eac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	4907      	ldr	r1, [pc, #28]	@ (8007ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ec2:	4808      	ldr	r0, [pc, #32]	@ (8007ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ec4:	f7ff fee4 	bl	8007c90 <USBD_GetString>
 8007ec8:	e004      	b.n	8007ed4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4904      	ldr	r1, [pc, #16]	@ (8007ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ece:	4805      	ldr	r0, [pc, #20]	@ (8007ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ed0:	f7ff fede 	bl	8007c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ed4:	4b02      	ldr	r3, [pc, #8]	@ (8007ee0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	200005ec 	.word	0x200005ec
 8007ee4:	08009020 	.word	0x08009020

08007ee8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	4904      	ldr	r1, [pc, #16]	@ (8007f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ef8:	4804      	ldr	r0, [pc, #16]	@ (8007f0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007efa:	f7ff fec9 	bl	8007c90 <USBD_GetString>
  return USBD_StrDesc;
 8007efe:	4b02      	ldr	r3, [pc, #8]	@ (8007f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	200005ec 	.word	0x200005ec
 8007f0c:	08009038 	.word	0x08009038

08007f10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	6039      	str	r1, [r7, #0]
 8007f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	221a      	movs	r2, #26
 8007f20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f22:	f000 f843 	bl	8007fac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f26:	4b02      	ldr	r3, [pc, #8]	@ (8007f30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	200000f4 	.word	0x200000f4

08007f34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	4907      	ldr	r1, [pc, #28]	@ (8007f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f4a:	4808      	ldr	r0, [pc, #32]	@ (8007f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f4c:	f7ff fea0 	bl	8007c90 <USBD_GetString>
 8007f50:	e004      	b.n	8007f5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	4904      	ldr	r1, [pc, #16]	@ (8007f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f56:	4805      	ldr	r0, [pc, #20]	@ (8007f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f58:	f7ff fe9a 	bl	8007c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f5c:	4b02      	ldr	r3, [pc, #8]	@ (8007f68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	200005ec 	.word	0x200005ec
 8007f6c:	0800904c 	.word	0x0800904c

08007f70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	6039      	str	r1, [r7, #0]
 8007f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d105      	bne.n	8007f8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	4907      	ldr	r1, [pc, #28]	@ (8007fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f86:	4808      	ldr	r0, [pc, #32]	@ (8007fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f88:	f7ff fe82 	bl	8007c90 <USBD_GetString>
 8007f8c:	e004      	b.n	8007f98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	4904      	ldr	r1, [pc, #16]	@ (8007fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f92:	4805      	ldr	r0, [pc, #20]	@ (8007fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f94:	f7ff fe7c 	bl	8007c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f98:	4b02      	ldr	r3, [pc, #8]	@ (8007fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200005ec 	.word	0x200005ec
 8007fa8:	08009058 	.word	0x08009058

08007fac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff0 <Get_SerialNum+0x44>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff4 <Get_SerialNum+0x48>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff8 <Get_SerialNum+0x4c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4413      	add	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	4909      	ldr	r1, [pc, #36]	@ (8007ffc <Get_SerialNum+0x50>)
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 f814 	bl	8008004 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fdc:	2204      	movs	r2, #4
 8007fde:	4908      	ldr	r1, [pc, #32]	@ (8008000 <Get_SerialNum+0x54>)
 8007fe0:	68b8      	ldr	r0, [r7, #8]
 8007fe2:	f000 f80f 	bl	8008004 <IntToUnicode>
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	1fff7a10 	.word	0x1fff7a10
 8007ff4:	1fff7a14 	.word	0x1fff7a14
 8007ff8:	1fff7a18 	.word	0x1fff7a18
 8007ffc:	200000f6 	.word	0x200000f6
 8008000:	20000106 	.word	0x20000106

08008004 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]
 800801a:	e027      	b.n	800806c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	0f1b      	lsrs	r3, r3, #28
 8008020:	2b09      	cmp	r3, #9
 8008022:	d80b      	bhi.n	800803c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	0f1b      	lsrs	r3, r3, #28
 8008028:	b2da      	uxtb	r2, r3
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	4619      	mov	r1, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	440b      	add	r3, r1
 8008034:	3230      	adds	r2, #48	@ 0x30
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	e00a      	b.n	8008052 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	0f1b      	lsrs	r3, r3, #28
 8008040:	b2da      	uxtb	r2, r3
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4619      	mov	r1, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	440b      	add	r3, r1
 800804c:	3237      	adds	r2, #55	@ 0x37
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	011b      	lsls	r3, r3, #4
 8008056:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	3301      	adds	r3, #1
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	4413      	add	r3, r2
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	3301      	adds	r3, #1
 800806a:	75fb      	strb	r3, [r7, #23]
 800806c:	7dfa      	ldrb	r2, [r7, #23]
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	429a      	cmp	r2, r3
 8008072:	d3d3      	bcc.n	800801c <IntToUnicode+0x18>
  }
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	@ 0x28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800808c:	f107 0314 	add.w	r3, r7, #20
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	609a      	str	r2, [r3, #8]
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080a4:	d13a      	bne.n	800811c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080a6:	2300      	movs	r3, #0
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008124 <HAL_PCD_MspInit+0xa0>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008124 <HAL_PCD_MspInit+0xa0>)
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80080b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008124 <HAL_PCD_MspInit+0xa0>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80080c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c8:	2302      	movs	r3, #2
 80080ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080d0:	2303      	movs	r3, #3
 80080d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080d4:	230a      	movs	r3, #10
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080d8:	f107 0314 	add.w	r3, r7, #20
 80080dc:	4619      	mov	r1, r3
 80080de:	4812      	ldr	r0, [pc, #72]	@ (8008128 <HAL_PCD_MspInit+0xa4>)
 80080e0:	f7f9 ffca 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008124 <HAL_PCD_MspInit+0xa0>)
 80080e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008124 <HAL_PCD_MspInit+0xa0>)
 80080ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008124 <HAL_PCD_MspInit+0xa0>)
 80080f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008124 <HAL_PCD_MspInit+0xa0>)
 80080fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8008100:	4b08      	ldr	r3, [pc, #32]	@ (8008124 <HAL_PCD_MspInit+0xa0>)
 8008102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800810c:	2200      	movs	r2, #0
 800810e:	2100      	movs	r1, #0
 8008110:	2043      	movs	r0, #67	@ 0x43
 8008112:	f7f9 fc0a 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008116:	2043      	movs	r0, #67	@ 0x43
 8008118:	f7f9 fc23 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800811c:	bf00      	nop
 800811e:	3728      	adds	r7, #40	@ 0x28
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40023800 	.word	0x40023800
 8008128:	40020000 	.word	0x40020000

0800812c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe fc41 	bl	80069ca <USBD_LL_SetupStage>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	4619      	mov	r1, r3
 800817a:	f7fe fc7b 	bl	8006a74 <USBD_LL_DataOutStage>
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	4613      	mov	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	3320      	adds	r3, #32
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f7fe fd14 	bl	8006bda <USBD_LL_DataInStage>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe fe4e 	bl	8006e6a <USBD_LL_SOF>
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081de:	2301      	movs	r3, #1
 80081e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	79db      	ldrb	r3, [r3, #7]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d001      	beq.n	80081ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081ea:	f7f8 fc97 	bl	8000b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081f4:	7bfa      	ldrb	r2, [r7, #15]
 80081f6:	4611      	mov	r1, r2
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe fdf2 	bl	8006de2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fd9a 	bl	8006d3e <USBD_LL_Reset>
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fded 	bl	8006e02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	7adb      	ldrb	r3, [r3, #11]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008248:	4b04      	ldr	r3, [pc, #16]	@ (800825c <HAL_PCD_SuspendCallback+0x48>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	4a03      	ldr	r2, [pc, #12]	@ (800825c <HAL_PCD_SuspendCallback+0x48>)
 800824e:	f043 0306 	orr.w	r3, r3, #6
 8008252:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	e000ed00 	.word	0xe000ed00

08008260 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fde3 	bl	8006e3a <USBD_LL_Resume>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fe3b 	bl	8006f0e <USBD_LL_IsoOUTIncomplete>
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fdf7 	bl	8006eaa <USBD_LL_IsoINIncomplete>
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe fe4d 	bl	8006f72 <USBD_LL_DevConnected>
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fe4a 	bl	8006f88 <USBD_LL_DevDisconnected>
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d13c      	bne.n	8008386 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800830c:	4a20      	ldr	r2, [pc, #128]	@ (8008390 <USBD_LL_Init+0x94>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a1e      	ldr	r2, [pc, #120]	@ (8008390 <USBD_LL_Init+0x94>)
 8008318:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800831c:	4b1c      	ldr	r3, [pc, #112]	@ (8008390 <USBD_LL_Init+0x94>)
 800831e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008322:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008324:	4b1a      	ldr	r3, [pc, #104]	@ (8008390 <USBD_LL_Init+0x94>)
 8008326:	2204      	movs	r2, #4
 8008328:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800832a:	4b19      	ldr	r3, [pc, #100]	@ (8008390 <USBD_LL_Init+0x94>)
 800832c:	2202      	movs	r2, #2
 800832e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008330:	4b17      	ldr	r3, [pc, #92]	@ (8008390 <USBD_LL_Init+0x94>)
 8008332:	2200      	movs	r2, #0
 8008334:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008336:	4b16      	ldr	r3, [pc, #88]	@ (8008390 <USBD_LL_Init+0x94>)
 8008338:	2202      	movs	r2, #2
 800833a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800833c:	4b14      	ldr	r3, [pc, #80]	@ (8008390 <USBD_LL_Init+0x94>)
 800833e:	2200      	movs	r2, #0
 8008340:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008342:	4b13      	ldr	r3, [pc, #76]	@ (8008390 <USBD_LL_Init+0x94>)
 8008344:	2200      	movs	r2, #0
 8008346:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008348:	4b11      	ldr	r3, [pc, #68]	@ (8008390 <USBD_LL_Init+0x94>)
 800834a:	2200      	movs	r2, #0
 800834c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800834e:	4b10      	ldr	r3, [pc, #64]	@ (8008390 <USBD_LL_Init+0x94>)
 8008350:	2200      	movs	r2, #0
 8008352:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008354:	4b0e      	ldr	r3, [pc, #56]	@ (8008390 <USBD_LL_Init+0x94>)
 8008356:	2200      	movs	r2, #0
 8008358:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800835a:	480d      	ldr	r0, [pc, #52]	@ (8008390 <USBD_LL_Init+0x94>)
 800835c:	f7fa f843 	bl	80023e6 <HAL_PCD_Init>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008366:	f7f8 fbd9 	bl	8000b1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800836a:	2180      	movs	r1, #128	@ 0x80
 800836c:	4808      	ldr	r0, [pc, #32]	@ (8008390 <USBD_LL_Init+0x94>)
 800836e:	f7fb fa56 	bl	800381e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008372:	2240      	movs	r2, #64	@ 0x40
 8008374:	2100      	movs	r1, #0
 8008376:	4806      	ldr	r0, [pc, #24]	@ (8008390 <USBD_LL_Init+0x94>)
 8008378:	f7fb fa0a 	bl	8003790 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800837c:	2280      	movs	r2, #128	@ 0x80
 800837e:	2101      	movs	r1, #1
 8008380:	4803      	ldr	r0, [pc, #12]	@ (8008390 <USBD_LL_Init+0x94>)
 8008382:	f7fb fa05 	bl	8003790 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	200007ec 	.word	0x200007ec

08008394 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fa f92a 	bl	8002604 <HAL_PCD_Start>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f930 	bl	800861c <USBD_Get_USB_Status>
 80083bc:	4603      	mov	r3, r0
 80083be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	4608      	mov	r0, r1
 80083d4:	4611      	mov	r1, r2
 80083d6:	461a      	mov	r2, r3
 80083d8:	4603      	mov	r3, r0
 80083da:	70fb      	strb	r3, [r7, #3]
 80083dc:	460b      	mov	r3, r1
 80083de:	70bb      	strb	r3, [r7, #2]
 80083e0:	4613      	mov	r3, r2
 80083e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083f2:	78bb      	ldrb	r3, [r7, #2]
 80083f4:	883a      	ldrh	r2, [r7, #0]
 80083f6:	78f9      	ldrb	r1, [r7, #3]
 80083f8:	f7fa fdfe 	bl	8002ff8 <HAL_PCD_EP_Open>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 f90a 	bl	800861c <USBD_Get_USB_Status>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800840c:	7bbb      	ldrb	r3, [r7, #14]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	4611      	mov	r1, r2
 8008434:	4618      	mov	r0, r3
 8008436:	f7fa fe47 	bl	80030c8 <HAL_PCD_EP_Close>
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f8eb 	bl	800861c <USBD_Get_USB_Status>
 8008446:	4603      	mov	r3, r0
 8008448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800844a:	7bbb      	ldrb	r3, [r7, #14]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800846e:	78fa      	ldrb	r2, [r7, #3]
 8008470:	4611      	mov	r1, r2
 8008472:	4618      	mov	r0, r3
 8008474:	f7fa fee7 	bl	8003246 <HAL_PCD_EP_SetStall>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f8cc 	bl	800861c <USBD_Get_USB_Status>
 8008484:	4603      	mov	r3, r0
 8008486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008488:	7bbb      	ldrb	r3, [r7, #14]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084ac:	78fa      	ldrb	r2, [r7, #3]
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fa ff2b 	bl	800330c <HAL_PCD_EP_ClrStall>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f8ad 	bl	800861c <USBD_Get_USB_Status>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	da0b      	bge.n	8008504 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	4613      	mov	r3, r2
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	440b      	add	r3, r1
 80084fe:	3316      	adds	r3, #22
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	e00b      	b.n	800851c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	4613      	mov	r3, r2
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800851a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008542:	78fa      	ldrb	r2, [r7, #3]
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f7fa fd32 	bl	8002fb0 <HAL_PCD_SetAddress>
 800854c:	4603      	mov	r3, r0
 800854e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f862 	bl	800861c <USBD_Get_USB_Status>
 8008558:	4603      	mov	r3, r0
 800855a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800855c:	7bbb      	ldrb	r3, [r7, #14]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
 8008572:	460b      	mov	r3, r1
 8008574:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008584:	7af9      	ldrb	r1, [r7, #11]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	f7fa fe22 	bl	80031d2 <HAL_PCD_EP_Transmit>
 800858e:	4603      	mov	r3, r0
 8008590:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	4618      	mov	r0, r3
 8008596:	f000 f841 	bl	800861c <USBD_Get_USB_Status>
 800859a:	4603      	mov	r3, r0
 800859c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800859e:	7dbb      	ldrb	r3, [r7, #22]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	607a      	str	r2, [r7, #4]
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	460b      	mov	r3, r1
 80085b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085c6:	7af9      	ldrb	r1, [r7, #11]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	f7fa fdc6 	bl	800315c <HAL_PCD_EP_Receive>
 80085d0:	4603      	mov	r3, r0
 80085d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f820 	bl	800861c <USBD_Get_USB_Status>
 80085dc:	4603      	mov	r3, r0
 80085de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085f4:	4b03      	ldr	r3, [pc, #12]	@ (8008604 <USBD_static_malloc+0x18>)
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20000cd0 	.word	0x20000cd0

08008608 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]

}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	2b03      	cmp	r3, #3
 800862e:	d817      	bhi.n	8008660 <USBD_Get_USB_Status+0x44>
 8008630:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <USBD_Get_USB_Status+0x1c>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	08008649 	.word	0x08008649
 800863c:	0800864f 	.word	0x0800864f
 8008640:	08008655 	.word	0x08008655
 8008644:	0800865b 	.word	0x0800865b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	e00b      	b.n	8008666 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800864e:	2303      	movs	r3, #3
 8008650:	73fb      	strb	r3, [r7, #15]
    break;
 8008652:	e008      	b.n	8008666 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
    break;
 8008658:	e005      	b.n	8008666 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800865a:	2303      	movs	r3, #3
 800865c:	73fb      	strb	r3, [r7, #15]
    break;
 800865e:	e002      	b.n	8008666 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	73fb      	strb	r3, [r7, #15]
    break;
 8008664:	bf00      	nop
  }
  return usb_status;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <_vsniprintf_r>:
 8008674:	b530      	push	{r4, r5, lr}
 8008676:	4614      	mov	r4, r2
 8008678:	2c00      	cmp	r4, #0
 800867a:	b09b      	sub	sp, #108	@ 0x6c
 800867c:	4605      	mov	r5, r0
 800867e:	461a      	mov	r2, r3
 8008680:	da05      	bge.n	800868e <_vsniprintf_r+0x1a>
 8008682:	238b      	movs	r3, #139	@ 0x8b
 8008684:	6003      	str	r3, [r0, #0]
 8008686:	f04f 30ff 	mov.w	r0, #4294967295
 800868a:	b01b      	add	sp, #108	@ 0x6c
 800868c:	bd30      	pop	{r4, r5, pc}
 800868e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008692:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008696:	bf14      	ite	ne
 8008698:	f104 33ff 	addne.w	r3, r4, #4294967295
 800869c:	4623      	moveq	r3, r4
 800869e:	9302      	str	r3, [sp, #8]
 80086a0:	9305      	str	r3, [sp, #20]
 80086a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80086a6:	9100      	str	r1, [sp, #0]
 80086a8:	9104      	str	r1, [sp, #16]
 80086aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80086ae:	4669      	mov	r1, sp
 80086b0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80086b2:	f000 f9a1 	bl	80089f8 <_svfiprintf_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	bfbc      	itt	lt
 80086ba:	238b      	movlt	r3, #139	@ 0x8b
 80086bc:	602b      	strlt	r3, [r5, #0]
 80086be:	2c00      	cmp	r4, #0
 80086c0:	d0e3      	beq.n	800868a <_vsniprintf_r+0x16>
 80086c2:	9b00      	ldr	r3, [sp, #0]
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	e7df      	b.n	800868a <_vsniprintf_r+0x16>
	...

080086cc <vsniprintf>:
 80086cc:	b507      	push	{r0, r1, r2, lr}
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	4613      	mov	r3, r2
 80086d2:	460a      	mov	r2, r1
 80086d4:	4601      	mov	r1, r0
 80086d6:	4803      	ldr	r0, [pc, #12]	@ (80086e4 <vsniprintf+0x18>)
 80086d8:	6800      	ldr	r0, [r0, #0]
 80086da:	f7ff ffcb 	bl	8008674 <_vsniprintf_r>
 80086de:	b003      	add	sp, #12
 80086e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80086e4:	20000110 	.word	0x20000110

080086e8 <memset>:
 80086e8:	4402      	add	r2, r0
 80086ea:	4603      	mov	r3, r0
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d100      	bne.n	80086f2 <memset+0xa>
 80086f0:	4770      	bx	lr
 80086f2:	f803 1b01 	strb.w	r1, [r3], #1
 80086f6:	e7f9      	b.n	80086ec <memset+0x4>

080086f8 <__errno>:
 80086f8:	4b01      	ldr	r3, [pc, #4]	@ (8008700 <__errno+0x8>)
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000110 	.word	0x20000110

08008704 <__libc_init_array>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4d0d      	ldr	r5, [pc, #52]	@ (800873c <__libc_init_array+0x38>)
 8008708:	4c0d      	ldr	r4, [pc, #52]	@ (8008740 <__libc_init_array+0x3c>)
 800870a:	1b64      	subs	r4, r4, r5
 800870c:	10a4      	asrs	r4, r4, #2
 800870e:	2600      	movs	r6, #0
 8008710:	42a6      	cmp	r6, r4
 8008712:	d109      	bne.n	8008728 <__libc_init_array+0x24>
 8008714:	4d0b      	ldr	r5, [pc, #44]	@ (8008744 <__libc_init_array+0x40>)
 8008716:	4c0c      	ldr	r4, [pc, #48]	@ (8008748 <__libc_init_array+0x44>)
 8008718:	f000 fc66 	bl	8008fe8 <_init>
 800871c:	1b64      	subs	r4, r4, r5
 800871e:	10a4      	asrs	r4, r4, #2
 8008720:	2600      	movs	r6, #0
 8008722:	42a6      	cmp	r6, r4
 8008724:	d105      	bne.n	8008732 <__libc_init_array+0x2e>
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	f855 3b04 	ldr.w	r3, [r5], #4
 800872c:	4798      	blx	r3
 800872e:	3601      	adds	r6, #1
 8008730:	e7ee      	b.n	8008710 <__libc_init_array+0xc>
 8008732:	f855 3b04 	ldr.w	r3, [r5], #4
 8008736:	4798      	blx	r3
 8008738:	3601      	adds	r6, #1
 800873a:	e7f2      	b.n	8008722 <__libc_init_array+0x1e>
 800873c:	080090c4 	.word	0x080090c4
 8008740:	080090c4 	.word	0x080090c4
 8008744:	080090c4 	.word	0x080090c4
 8008748:	080090c8 	.word	0x080090c8

0800874c <__retarget_lock_acquire_recursive>:
 800874c:	4770      	bx	lr

0800874e <__retarget_lock_release_recursive>:
 800874e:	4770      	bx	lr

08008750 <_free_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4605      	mov	r5, r0
 8008754:	2900      	cmp	r1, #0
 8008756:	d041      	beq.n	80087dc <_free_r+0x8c>
 8008758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800875c:	1f0c      	subs	r4, r1, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfb8      	it	lt
 8008762:	18e4      	addlt	r4, r4, r3
 8008764:	f000 f8e0 	bl	8008928 <__malloc_lock>
 8008768:	4a1d      	ldr	r2, [pc, #116]	@ (80087e0 <_free_r+0x90>)
 800876a:	6813      	ldr	r3, [r2, #0]
 800876c:	b933      	cbnz	r3, 800877c <_free_r+0x2c>
 800876e:	6063      	str	r3, [r4, #4]
 8008770:	6014      	str	r4, [r2, #0]
 8008772:	4628      	mov	r0, r5
 8008774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008778:	f000 b8dc 	b.w	8008934 <__malloc_unlock>
 800877c:	42a3      	cmp	r3, r4
 800877e:	d908      	bls.n	8008792 <_free_r+0x42>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	1821      	adds	r1, r4, r0
 8008784:	428b      	cmp	r3, r1
 8008786:	bf01      	itttt	eq
 8008788:	6819      	ldreq	r1, [r3, #0]
 800878a:	685b      	ldreq	r3, [r3, #4]
 800878c:	1809      	addeq	r1, r1, r0
 800878e:	6021      	streq	r1, [r4, #0]
 8008790:	e7ed      	b.n	800876e <_free_r+0x1e>
 8008792:	461a      	mov	r2, r3
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	b10b      	cbz	r3, 800879c <_free_r+0x4c>
 8008798:	42a3      	cmp	r3, r4
 800879a:	d9fa      	bls.n	8008792 <_free_r+0x42>
 800879c:	6811      	ldr	r1, [r2, #0]
 800879e:	1850      	adds	r0, r2, r1
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d10b      	bne.n	80087bc <_free_r+0x6c>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	4401      	add	r1, r0
 80087a8:	1850      	adds	r0, r2, r1
 80087aa:	4283      	cmp	r3, r0
 80087ac:	6011      	str	r1, [r2, #0]
 80087ae:	d1e0      	bne.n	8008772 <_free_r+0x22>
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	6053      	str	r3, [r2, #4]
 80087b6:	4408      	add	r0, r1
 80087b8:	6010      	str	r0, [r2, #0]
 80087ba:	e7da      	b.n	8008772 <_free_r+0x22>
 80087bc:	d902      	bls.n	80087c4 <_free_r+0x74>
 80087be:	230c      	movs	r3, #12
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	e7d6      	b.n	8008772 <_free_r+0x22>
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	1821      	adds	r1, r4, r0
 80087c8:	428b      	cmp	r3, r1
 80087ca:	bf04      	itt	eq
 80087cc:	6819      	ldreq	r1, [r3, #0]
 80087ce:	685b      	ldreq	r3, [r3, #4]
 80087d0:	6063      	str	r3, [r4, #4]
 80087d2:	bf04      	itt	eq
 80087d4:	1809      	addeq	r1, r1, r0
 80087d6:	6021      	streq	r1, [r4, #0]
 80087d8:	6054      	str	r4, [r2, #4]
 80087da:	e7ca      	b.n	8008772 <_free_r+0x22>
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	bf00      	nop
 80087e0:	20000e28 	.word	0x20000e28

080087e4 <sbrk_aligned>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008824 <sbrk_aligned+0x40>)
 80087e8:	460c      	mov	r4, r1
 80087ea:	6831      	ldr	r1, [r6, #0]
 80087ec:	4605      	mov	r5, r0
 80087ee:	b911      	cbnz	r1, 80087f6 <sbrk_aligned+0x12>
 80087f0:	f000 fba6 	bl	8008f40 <_sbrk_r>
 80087f4:	6030      	str	r0, [r6, #0]
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 fba1 	bl	8008f40 <_sbrk_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d103      	bne.n	800880a <sbrk_aligned+0x26>
 8008802:	f04f 34ff 	mov.w	r4, #4294967295
 8008806:	4620      	mov	r0, r4
 8008808:	bd70      	pop	{r4, r5, r6, pc}
 800880a:	1cc4      	adds	r4, r0, #3
 800880c:	f024 0403 	bic.w	r4, r4, #3
 8008810:	42a0      	cmp	r0, r4
 8008812:	d0f8      	beq.n	8008806 <sbrk_aligned+0x22>
 8008814:	1a21      	subs	r1, r4, r0
 8008816:	4628      	mov	r0, r5
 8008818:	f000 fb92 	bl	8008f40 <_sbrk_r>
 800881c:	3001      	adds	r0, #1
 800881e:	d1f2      	bne.n	8008806 <sbrk_aligned+0x22>
 8008820:	e7ef      	b.n	8008802 <sbrk_aligned+0x1e>
 8008822:	bf00      	nop
 8008824:	20000e24 	.word	0x20000e24

08008828 <_malloc_r>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	1ccd      	adds	r5, r1, #3
 800882e:	f025 0503 	bic.w	r5, r5, #3
 8008832:	3508      	adds	r5, #8
 8008834:	2d0c      	cmp	r5, #12
 8008836:	bf38      	it	cc
 8008838:	250c      	movcc	r5, #12
 800883a:	2d00      	cmp	r5, #0
 800883c:	4606      	mov	r6, r0
 800883e:	db01      	blt.n	8008844 <_malloc_r+0x1c>
 8008840:	42a9      	cmp	r1, r5
 8008842:	d904      	bls.n	800884e <_malloc_r+0x26>
 8008844:	230c      	movs	r3, #12
 8008846:	6033      	str	r3, [r6, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008924 <_malloc_r+0xfc>
 8008852:	f000 f869 	bl	8008928 <__malloc_lock>
 8008856:	f8d8 3000 	ldr.w	r3, [r8]
 800885a:	461c      	mov	r4, r3
 800885c:	bb44      	cbnz	r4, 80088b0 <_malloc_r+0x88>
 800885e:	4629      	mov	r1, r5
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff ffbf 	bl	80087e4 <sbrk_aligned>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	4604      	mov	r4, r0
 800886a:	d158      	bne.n	800891e <_malloc_r+0xf6>
 800886c:	f8d8 4000 	ldr.w	r4, [r8]
 8008870:	4627      	mov	r7, r4
 8008872:	2f00      	cmp	r7, #0
 8008874:	d143      	bne.n	80088fe <_malloc_r+0xd6>
 8008876:	2c00      	cmp	r4, #0
 8008878:	d04b      	beq.n	8008912 <_malloc_r+0xea>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	4639      	mov	r1, r7
 800887e:	4630      	mov	r0, r6
 8008880:	eb04 0903 	add.w	r9, r4, r3
 8008884:	f000 fb5c 	bl	8008f40 <_sbrk_r>
 8008888:	4581      	cmp	r9, r0
 800888a:	d142      	bne.n	8008912 <_malloc_r+0xea>
 800888c:	6821      	ldr	r1, [r4, #0]
 800888e:	1a6d      	subs	r5, r5, r1
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff ffa6 	bl	80087e4 <sbrk_aligned>
 8008898:	3001      	adds	r0, #1
 800889a:	d03a      	beq.n	8008912 <_malloc_r+0xea>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	442b      	add	r3, r5
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	f8d8 3000 	ldr.w	r3, [r8]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	bb62      	cbnz	r2, 8008904 <_malloc_r+0xdc>
 80088aa:	f8c8 7000 	str.w	r7, [r8]
 80088ae:	e00f      	b.n	80088d0 <_malloc_r+0xa8>
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	1b52      	subs	r2, r2, r5
 80088b4:	d420      	bmi.n	80088f8 <_malloc_r+0xd0>
 80088b6:	2a0b      	cmp	r2, #11
 80088b8:	d917      	bls.n	80088ea <_malloc_r+0xc2>
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	42a3      	cmp	r3, r4
 80088be:	6025      	str	r5, [r4, #0]
 80088c0:	bf18      	it	ne
 80088c2:	6059      	strne	r1, [r3, #4]
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	bf08      	it	eq
 80088c8:	f8c8 1000 	streq.w	r1, [r8]
 80088cc:	5162      	str	r2, [r4, r5]
 80088ce:	604b      	str	r3, [r1, #4]
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 f82f 	bl	8008934 <__malloc_unlock>
 80088d6:	f104 000b 	add.w	r0, r4, #11
 80088da:	1d23      	adds	r3, r4, #4
 80088dc:	f020 0007 	bic.w	r0, r0, #7
 80088e0:	1ac2      	subs	r2, r0, r3
 80088e2:	bf1c      	itt	ne
 80088e4:	1a1b      	subne	r3, r3, r0
 80088e6:	50a3      	strne	r3, [r4, r2]
 80088e8:	e7af      	b.n	800884a <_malloc_r+0x22>
 80088ea:	6862      	ldr	r2, [r4, #4]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	bf0c      	ite	eq
 80088f0:	f8c8 2000 	streq.w	r2, [r8]
 80088f4:	605a      	strne	r2, [r3, #4]
 80088f6:	e7eb      	b.n	80088d0 <_malloc_r+0xa8>
 80088f8:	4623      	mov	r3, r4
 80088fa:	6864      	ldr	r4, [r4, #4]
 80088fc:	e7ae      	b.n	800885c <_malloc_r+0x34>
 80088fe:	463c      	mov	r4, r7
 8008900:	687f      	ldr	r7, [r7, #4]
 8008902:	e7b6      	b.n	8008872 <_malloc_r+0x4a>
 8008904:	461a      	mov	r2, r3
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	42a3      	cmp	r3, r4
 800890a:	d1fb      	bne.n	8008904 <_malloc_r+0xdc>
 800890c:	2300      	movs	r3, #0
 800890e:	6053      	str	r3, [r2, #4]
 8008910:	e7de      	b.n	80088d0 <_malloc_r+0xa8>
 8008912:	230c      	movs	r3, #12
 8008914:	6033      	str	r3, [r6, #0]
 8008916:	4630      	mov	r0, r6
 8008918:	f000 f80c 	bl	8008934 <__malloc_unlock>
 800891c:	e794      	b.n	8008848 <_malloc_r+0x20>
 800891e:	6005      	str	r5, [r0, #0]
 8008920:	e7d6      	b.n	80088d0 <_malloc_r+0xa8>
 8008922:	bf00      	nop
 8008924:	20000e28 	.word	0x20000e28

08008928 <__malloc_lock>:
 8008928:	4801      	ldr	r0, [pc, #4]	@ (8008930 <__malloc_lock+0x8>)
 800892a:	f7ff bf0f 	b.w	800874c <__retarget_lock_acquire_recursive>
 800892e:	bf00      	nop
 8008930:	20000e20 	.word	0x20000e20

08008934 <__malloc_unlock>:
 8008934:	4801      	ldr	r0, [pc, #4]	@ (800893c <__malloc_unlock+0x8>)
 8008936:	f7ff bf0a 	b.w	800874e <__retarget_lock_release_recursive>
 800893a:	bf00      	nop
 800893c:	20000e20 	.word	0x20000e20

08008940 <__ssputs_r>:
 8008940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008944:	688e      	ldr	r6, [r1, #8]
 8008946:	461f      	mov	r7, r3
 8008948:	42be      	cmp	r6, r7
 800894a:	680b      	ldr	r3, [r1, #0]
 800894c:	4682      	mov	sl, r0
 800894e:	460c      	mov	r4, r1
 8008950:	4690      	mov	r8, r2
 8008952:	d82d      	bhi.n	80089b0 <__ssputs_r+0x70>
 8008954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008958:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800895c:	d026      	beq.n	80089ac <__ssputs_r+0x6c>
 800895e:	6965      	ldr	r5, [r4, #20]
 8008960:	6909      	ldr	r1, [r1, #16]
 8008962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008966:	eba3 0901 	sub.w	r9, r3, r1
 800896a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800896e:	1c7b      	adds	r3, r7, #1
 8008970:	444b      	add	r3, r9
 8008972:	106d      	asrs	r5, r5, #1
 8008974:	429d      	cmp	r5, r3
 8008976:	bf38      	it	cc
 8008978:	461d      	movcc	r5, r3
 800897a:	0553      	lsls	r3, r2, #21
 800897c:	d527      	bpl.n	80089ce <__ssputs_r+0x8e>
 800897e:	4629      	mov	r1, r5
 8008980:	f7ff ff52 	bl	8008828 <_malloc_r>
 8008984:	4606      	mov	r6, r0
 8008986:	b360      	cbz	r0, 80089e2 <__ssputs_r+0xa2>
 8008988:	6921      	ldr	r1, [r4, #16]
 800898a:	464a      	mov	r2, r9
 800898c:	f000 fae8 	bl	8008f60 <memcpy>
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	6126      	str	r6, [r4, #16]
 800899e:	6165      	str	r5, [r4, #20]
 80089a0:	444e      	add	r6, r9
 80089a2:	eba5 0509 	sub.w	r5, r5, r9
 80089a6:	6026      	str	r6, [r4, #0]
 80089a8:	60a5      	str	r5, [r4, #8]
 80089aa:	463e      	mov	r6, r7
 80089ac:	42be      	cmp	r6, r7
 80089ae:	d900      	bls.n	80089b2 <__ssputs_r+0x72>
 80089b0:	463e      	mov	r6, r7
 80089b2:	6820      	ldr	r0, [r4, #0]
 80089b4:	4632      	mov	r2, r6
 80089b6:	4641      	mov	r1, r8
 80089b8:	f000 faa8 	bl	8008f0c <memmove>
 80089bc:	68a3      	ldr	r3, [r4, #8]
 80089be:	1b9b      	subs	r3, r3, r6
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	4433      	add	r3, r6
 80089c6:	6023      	str	r3, [r4, #0]
 80089c8:	2000      	movs	r0, #0
 80089ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ce:	462a      	mov	r2, r5
 80089d0:	f000 fad4 	bl	8008f7c <_realloc_r>
 80089d4:	4606      	mov	r6, r0
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d1e0      	bne.n	800899c <__ssputs_r+0x5c>
 80089da:	6921      	ldr	r1, [r4, #16]
 80089dc:	4650      	mov	r0, sl
 80089de:	f7ff feb7 	bl	8008750 <_free_r>
 80089e2:	230c      	movs	r3, #12
 80089e4:	f8ca 3000 	str.w	r3, [sl]
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	e7e9      	b.n	80089ca <__ssputs_r+0x8a>
	...

080089f8 <_svfiprintf_r>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	4698      	mov	r8, r3
 80089fe:	898b      	ldrh	r3, [r1, #12]
 8008a00:	061b      	lsls	r3, r3, #24
 8008a02:	b09d      	sub	sp, #116	@ 0x74
 8008a04:	4607      	mov	r7, r0
 8008a06:	460d      	mov	r5, r1
 8008a08:	4614      	mov	r4, r2
 8008a0a:	d510      	bpl.n	8008a2e <_svfiprintf_r+0x36>
 8008a0c:	690b      	ldr	r3, [r1, #16]
 8008a0e:	b973      	cbnz	r3, 8008a2e <_svfiprintf_r+0x36>
 8008a10:	2140      	movs	r1, #64	@ 0x40
 8008a12:	f7ff ff09 	bl	8008828 <_malloc_r>
 8008a16:	6028      	str	r0, [r5, #0]
 8008a18:	6128      	str	r0, [r5, #16]
 8008a1a:	b930      	cbnz	r0, 8008a2a <_svfiprintf_r+0x32>
 8008a1c:	230c      	movs	r3, #12
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	b01d      	add	sp, #116	@ 0x74
 8008a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2a:	2340      	movs	r3, #64	@ 0x40
 8008a2c:	616b      	str	r3, [r5, #20]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a32:	2320      	movs	r3, #32
 8008a34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a3c:	2330      	movs	r3, #48	@ 0x30
 8008a3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008bdc <_svfiprintf_r+0x1e4>
 8008a42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a46:	f04f 0901 	mov.w	r9, #1
 8008a4a:	4623      	mov	r3, r4
 8008a4c:	469a      	mov	sl, r3
 8008a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a52:	b10a      	cbz	r2, 8008a58 <_svfiprintf_r+0x60>
 8008a54:	2a25      	cmp	r2, #37	@ 0x25
 8008a56:	d1f9      	bne.n	8008a4c <_svfiprintf_r+0x54>
 8008a58:	ebba 0b04 	subs.w	fp, sl, r4
 8008a5c:	d00b      	beq.n	8008a76 <_svfiprintf_r+0x7e>
 8008a5e:	465b      	mov	r3, fp
 8008a60:	4622      	mov	r2, r4
 8008a62:	4629      	mov	r1, r5
 8008a64:	4638      	mov	r0, r7
 8008a66:	f7ff ff6b 	bl	8008940 <__ssputs_r>
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	f000 80a7 	beq.w	8008bbe <_svfiprintf_r+0x1c6>
 8008a70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a72:	445a      	add	r2, fp
 8008a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a76:	f89a 3000 	ldrb.w	r3, [sl]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 809f 	beq.w	8008bbe <_svfiprintf_r+0x1c6>
 8008a80:	2300      	movs	r3, #0
 8008a82:	f04f 32ff 	mov.w	r2, #4294967295
 8008a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a8a:	f10a 0a01 	add.w	sl, sl, #1
 8008a8e:	9304      	str	r3, [sp, #16]
 8008a90:	9307      	str	r3, [sp, #28]
 8008a92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a96:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a98:	4654      	mov	r4, sl
 8008a9a:	2205      	movs	r2, #5
 8008a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa0:	484e      	ldr	r0, [pc, #312]	@ (8008bdc <_svfiprintf_r+0x1e4>)
 8008aa2:	f7f7 fb9d 	bl	80001e0 <memchr>
 8008aa6:	9a04      	ldr	r2, [sp, #16]
 8008aa8:	b9d8      	cbnz	r0, 8008ae2 <_svfiprintf_r+0xea>
 8008aaa:	06d0      	lsls	r0, r2, #27
 8008aac:	bf44      	itt	mi
 8008aae:	2320      	movmi	r3, #32
 8008ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ab4:	0711      	lsls	r1, r2, #28
 8008ab6:	bf44      	itt	mi
 8008ab8:	232b      	movmi	r3, #43	@ 0x2b
 8008aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008abe:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ac4:	d015      	beq.n	8008af2 <_svfiprintf_r+0xfa>
 8008ac6:	9a07      	ldr	r2, [sp, #28]
 8008ac8:	4654      	mov	r4, sl
 8008aca:	2000      	movs	r0, #0
 8008acc:	f04f 0c0a 	mov.w	ip, #10
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ad6:	3b30      	subs	r3, #48	@ 0x30
 8008ad8:	2b09      	cmp	r3, #9
 8008ada:	d94b      	bls.n	8008b74 <_svfiprintf_r+0x17c>
 8008adc:	b1b0      	cbz	r0, 8008b0c <_svfiprintf_r+0x114>
 8008ade:	9207      	str	r2, [sp, #28]
 8008ae0:	e014      	b.n	8008b0c <_svfiprintf_r+0x114>
 8008ae2:	eba0 0308 	sub.w	r3, r0, r8
 8008ae6:	fa09 f303 	lsl.w	r3, r9, r3
 8008aea:	4313      	orrs	r3, r2
 8008aec:	9304      	str	r3, [sp, #16]
 8008aee:	46a2      	mov	sl, r4
 8008af0:	e7d2      	b.n	8008a98 <_svfiprintf_r+0xa0>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	1d19      	adds	r1, r3, #4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	9103      	str	r1, [sp, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bfbb      	ittet	lt
 8008afe:	425b      	neglt	r3, r3
 8008b00:	f042 0202 	orrlt.w	r2, r2, #2
 8008b04:	9307      	strge	r3, [sp, #28]
 8008b06:	9307      	strlt	r3, [sp, #28]
 8008b08:	bfb8      	it	lt
 8008b0a:	9204      	strlt	r2, [sp, #16]
 8008b0c:	7823      	ldrb	r3, [r4, #0]
 8008b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b10:	d10a      	bne.n	8008b28 <_svfiprintf_r+0x130>
 8008b12:	7863      	ldrb	r3, [r4, #1]
 8008b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b16:	d132      	bne.n	8008b7e <_svfiprintf_r+0x186>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	1d1a      	adds	r2, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	9203      	str	r2, [sp, #12]
 8008b20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b24:	3402      	adds	r4, #2
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008bec <_svfiprintf_r+0x1f4>
 8008b2c:	7821      	ldrb	r1, [r4, #0]
 8008b2e:	2203      	movs	r2, #3
 8008b30:	4650      	mov	r0, sl
 8008b32:	f7f7 fb55 	bl	80001e0 <memchr>
 8008b36:	b138      	cbz	r0, 8008b48 <_svfiprintf_r+0x150>
 8008b38:	9b04      	ldr	r3, [sp, #16]
 8008b3a:	eba0 000a 	sub.w	r0, r0, sl
 8008b3e:	2240      	movs	r2, #64	@ 0x40
 8008b40:	4082      	lsls	r2, r0
 8008b42:	4313      	orrs	r3, r2
 8008b44:	3401      	adds	r4, #1
 8008b46:	9304      	str	r3, [sp, #16]
 8008b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4c:	4824      	ldr	r0, [pc, #144]	@ (8008be0 <_svfiprintf_r+0x1e8>)
 8008b4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b52:	2206      	movs	r2, #6
 8008b54:	f7f7 fb44 	bl	80001e0 <memchr>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d036      	beq.n	8008bca <_svfiprintf_r+0x1d2>
 8008b5c:	4b21      	ldr	r3, [pc, #132]	@ (8008be4 <_svfiprintf_r+0x1ec>)
 8008b5e:	bb1b      	cbnz	r3, 8008ba8 <_svfiprintf_r+0x1b0>
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	3307      	adds	r3, #7
 8008b64:	f023 0307 	bic.w	r3, r3, #7
 8008b68:	3308      	adds	r3, #8
 8008b6a:	9303      	str	r3, [sp, #12]
 8008b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b6e:	4433      	add	r3, r6
 8008b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b72:	e76a      	b.n	8008a4a <_svfiprintf_r+0x52>
 8008b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b78:	460c      	mov	r4, r1
 8008b7a:	2001      	movs	r0, #1
 8008b7c:	e7a8      	b.n	8008ad0 <_svfiprintf_r+0xd8>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	3401      	adds	r4, #1
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	4619      	mov	r1, r3
 8008b86:	f04f 0c0a 	mov.w	ip, #10
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b90:	3a30      	subs	r2, #48	@ 0x30
 8008b92:	2a09      	cmp	r2, #9
 8008b94:	d903      	bls.n	8008b9e <_svfiprintf_r+0x1a6>
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0c6      	beq.n	8008b28 <_svfiprintf_r+0x130>
 8008b9a:	9105      	str	r1, [sp, #20]
 8008b9c:	e7c4      	b.n	8008b28 <_svfiprintf_r+0x130>
 8008b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e7f0      	b.n	8008b8a <_svfiprintf_r+0x192>
 8008ba8:	ab03      	add	r3, sp, #12
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	462a      	mov	r2, r5
 8008bae:	4b0e      	ldr	r3, [pc, #56]	@ (8008be8 <_svfiprintf_r+0x1f0>)
 8008bb0:	a904      	add	r1, sp, #16
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	f3af 8000 	nop.w
 8008bb8:	1c42      	adds	r2, r0, #1
 8008bba:	4606      	mov	r6, r0
 8008bbc:	d1d6      	bne.n	8008b6c <_svfiprintf_r+0x174>
 8008bbe:	89ab      	ldrh	r3, [r5, #12]
 8008bc0:	065b      	lsls	r3, r3, #25
 8008bc2:	f53f af2d 	bmi.w	8008a20 <_svfiprintf_r+0x28>
 8008bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bc8:	e72c      	b.n	8008a24 <_svfiprintf_r+0x2c>
 8008bca:	ab03      	add	r3, sp, #12
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	462a      	mov	r2, r5
 8008bd0:	4b05      	ldr	r3, [pc, #20]	@ (8008be8 <_svfiprintf_r+0x1f0>)
 8008bd2:	a904      	add	r1, sp, #16
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f000 f879 	bl	8008ccc <_printf_i>
 8008bda:	e7ed      	b.n	8008bb8 <_svfiprintf_r+0x1c0>
 8008bdc:	08009088 	.word	0x08009088
 8008be0:	08009092 	.word	0x08009092
 8008be4:	00000000 	.word	0x00000000
 8008be8:	08008941 	.word	0x08008941
 8008bec:	0800908e 	.word	0x0800908e

08008bf0 <_printf_common>:
 8008bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	4616      	mov	r6, r2
 8008bf6:	4698      	mov	r8, r3
 8008bf8:	688a      	ldr	r2, [r1, #8]
 8008bfa:	690b      	ldr	r3, [r1, #16]
 8008bfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c00:	4293      	cmp	r3, r2
 8008c02:	bfb8      	it	lt
 8008c04:	4613      	movlt	r3, r2
 8008c06:	6033      	str	r3, [r6, #0]
 8008c08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	b10a      	cbz	r2, 8008c16 <_printf_common+0x26>
 8008c12:	3301      	adds	r3, #1
 8008c14:	6033      	str	r3, [r6, #0]
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	0699      	lsls	r1, r3, #26
 8008c1a:	bf42      	ittt	mi
 8008c1c:	6833      	ldrmi	r3, [r6, #0]
 8008c1e:	3302      	addmi	r3, #2
 8008c20:	6033      	strmi	r3, [r6, #0]
 8008c22:	6825      	ldr	r5, [r4, #0]
 8008c24:	f015 0506 	ands.w	r5, r5, #6
 8008c28:	d106      	bne.n	8008c38 <_printf_common+0x48>
 8008c2a:	f104 0a19 	add.w	sl, r4, #25
 8008c2e:	68e3      	ldr	r3, [r4, #12]
 8008c30:	6832      	ldr	r2, [r6, #0]
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	42ab      	cmp	r3, r5
 8008c36:	dc26      	bgt.n	8008c86 <_printf_common+0x96>
 8008c38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c3c:	6822      	ldr	r2, [r4, #0]
 8008c3e:	3b00      	subs	r3, #0
 8008c40:	bf18      	it	ne
 8008c42:	2301      	movne	r3, #1
 8008c44:	0692      	lsls	r2, r2, #26
 8008c46:	d42b      	bmi.n	8008ca0 <_printf_common+0xb0>
 8008c48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c4c:	4641      	mov	r1, r8
 8008c4e:	4638      	mov	r0, r7
 8008c50:	47c8      	blx	r9
 8008c52:	3001      	adds	r0, #1
 8008c54:	d01e      	beq.n	8008c94 <_printf_common+0xa4>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	6922      	ldr	r2, [r4, #16]
 8008c5a:	f003 0306 	and.w	r3, r3, #6
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	bf02      	ittt	eq
 8008c62:	68e5      	ldreq	r5, [r4, #12]
 8008c64:	6833      	ldreq	r3, [r6, #0]
 8008c66:	1aed      	subeq	r5, r5, r3
 8008c68:	68a3      	ldr	r3, [r4, #8]
 8008c6a:	bf0c      	ite	eq
 8008c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c70:	2500      	movne	r5, #0
 8008c72:	4293      	cmp	r3, r2
 8008c74:	bfc4      	itt	gt
 8008c76:	1a9b      	subgt	r3, r3, r2
 8008c78:	18ed      	addgt	r5, r5, r3
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	341a      	adds	r4, #26
 8008c7e:	42b5      	cmp	r5, r6
 8008c80:	d11a      	bne.n	8008cb8 <_printf_common+0xc8>
 8008c82:	2000      	movs	r0, #0
 8008c84:	e008      	b.n	8008c98 <_printf_common+0xa8>
 8008c86:	2301      	movs	r3, #1
 8008c88:	4652      	mov	r2, sl
 8008c8a:	4641      	mov	r1, r8
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	47c8      	blx	r9
 8008c90:	3001      	adds	r0, #1
 8008c92:	d103      	bne.n	8008c9c <_printf_common+0xac>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	e7c6      	b.n	8008c2e <_printf_common+0x3e>
 8008ca0:	18e1      	adds	r1, r4, r3
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	2030      	movs	r0, #48	@ 0x30
 8008ca6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008caa:	4422      	add	r2, r4
 8008cac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008cb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cb4:	3302      	adds	r3, #2
 8008cb6:	e7c7      	b.n	8008c48 <_printf_common+0x58>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4622      	mov	r2, r4
 8008cbc:	4641      	mov	r1, r8
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	47c8      	blx	r9
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d0e6      	beq.n	8008c94 <_printf_common+0xa4>
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7d9      	b.n	8008c7e <_printf_common+0x8e>
	...

08008ccc <_printf_i>:
 8008ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	7e0f      	ldrb	r7, [r1, #24]
 8008cd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cd4:	2f78      	cmp	r7, #120	@ 0x78
 8008cd6:	4691      	mov	r9, r2
 8008cd8:	4680      	mov	r8, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	469a      	mov	sl, r3
 8008cde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ce2:	d807      	bhi.n	8008cf4 <_printf_i+0x28>
 8008ce4:	2f62      	cmp	r7, #98	@ 0x62
 8008ce6:	d80a      	bhi.n	8008cfe <_printf_i+0x32>
 8008ce8:	2f00      	cmp	r7, #0
 8008cea:	f000 80d2 	beq.w	8008e92 <_printf_i+0x1c6>
 8008cee:	2f58      	cmp	r7, #88	@ 0x58
 8008cf0:	f000 80b9 	beq.w	8008e66 <_printf_i+0x19a>
 8008cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cfc:	e03a      	b.n	8008d74 <_printf_i+0xa8>
 8008cfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d02:	2b15      	cmp	r3, #21
 8008d04:	d8f6      	bhi.n	8008cf4 <_printf_i+0x28>
 8008d06:	a101      	add	r1, pc, #4	@ (adr r1, 8008d0c <_printf_i+0x40>)
 8008d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d0c:	08008d65 	.word	0x08008d65
 8008d10:	08008d79 	.word	0x08008d79
 8008d14:	08008cf5 	.word	0x08008cf5
 8008d18:	08008cf5 	.word	0x08008cf5
 8008d1c:	08008cf5 	.word	0x08008cf5
 8008d20:	08008cf5 	.word	0x08008cf5
 8008d24:	08008d79 	.word	0x08008d79
 8008d28:	08008cf5 	.word	0x08008cf5
 8008d2c:	08008cf5 	.word	0x08008cf5
 8008d30:	08008cf5 	.word	0x08008cf5
 8008d34:	08008cf5 	.word	0x08008cf5
 8008d38:	08008e79 	.word	0x08008e79
 8008d3c:	08008da3 	.word	0x08008da3
 8008d40:	08008e33 	.word	0x08008e33
 8008d44:	08008cf5 	.word	0x08008cf5
 8008d48:	08008cf5 	.word	0x08008cf5
 8008d4c:	08008e9b 	.word	0x08008e9b
 8008d50:	08008cf5 	.word	0x08008cf5
 8008d54:	08008da3 	.word	0x08008da3
 8008d58:	08008cf5 	.word	0x08008cf5
 8008d5c:	08008cf5 	.word	0x08008cf5
 8008d60:	08008e3b 	.word	0x08008e3b
 8008d64:	6833      	ldr	r3, [r6, #0]
 8008d66:	1d1a      	adds	r2, r3, #4
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6032      	str	r2, [r6, #0]
 8008d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d74:	2301      	movs	r3, #1
 8008d76:	e09d      	b.n	8008eb4 <_printf_i+0x1e8>
 8008d78:	6833      	ldr	r3, [r6, #0]
 8008d7a:	6820      	ldr	r0, [r4, #0]
 8008d7c:	1d19      	adds	r1, r3, #4
 8008d7e:	6031      	str	r1, [r6, #0]
 8008d80:	0606      	lsls	r6, r0, #24
 8008d82:	d501      	bpl.n	8008d88 <_printf_i+0xbc>
 8008d84:	681d      	ldr	r5, [r3, #0]
 8008d86:	e003      	b.n	8008d90 <_printf_i+0xc4>
 8008d88:	0645      	lsls	r5, r0, #25
 8008d8a:	d5fb      	bpl.n	8008d84 <_printf_i+0xb8>
 8008d8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d90:	2d00      	cmp	r5, #0
 8008d92:	da03      	bge.n	8008d9c <_printf_i+0xd0>
 8008d94:	232d      	movs	r3, #45	@ 0x2d
 8008d96:	426d      	negs	r5, r5
 8008d98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d9c:	4859      	ldr	r0, [pc, #356]	@ (8008f04 <_printf_i+0x238>)
 8008d9e:	230a      	movs	r3, #10
 8008da0:	e011      	b.n	8008dc6 <_printf_i+0xfa>
 8008da2:	6821      	ldr	r1, [r4, #0]
 8008da4:	6833      	ldr	r3, [r6, #0]
 8008da6:	0608      	lsls	r0, r1, #24
 8008da8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008dac:	d402      	bmi.n	8008db4 <_printf_i+0xe8>
 8008dae:	0649      	lsls	r1, r1, #25
 8008db0:	bf48      	it	mi
 8008db2:	b2ad      	uxthmi	r5, r5
 8008db4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008db6:	4853      	ldr	r0, [pc, #332]	@ (8008f04 <_printf_i+0x238>)
 8008db8:	6033      	str	r3, [r6, #0]
 8008dba:	bf14      	ite	ne
 8008dbc:	230a      	movne	r3, #10
 8008dbe:	2308      	moveq	r3, #8
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008dc6:	6866      	ldr	r6, [r4, #4]
 8008dc8:	60a6      	str	r6, [r4, #8]
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	bfa2      	ittt	ge
 8008dce:	6821      	ldrge	r1, [r4, #0]
 8008dd0:	f021 0104 	bicge.w	r1, r1, #4
 8008dd4:	6021      	strge	r1, [r4, #0]
 8008dd6:	b90d      	cbnz	r5, 8008ddc <_printf_i+0x110>
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	d04b      	beq.n	8008e74 <_printf_i+0x1a8>
 8008ddc:	4616      	mov	r6, r2
 8008dde:	fbb5 f1f3 	udiv	r1, r5, r3
 8008de2:	fb03 5711 	mls	r7, r3, r1, r5
 8008de6:	5dc7      	ldrb	r7, [r0, r7]
 8008de8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dec:	462f      	mov	r7, r5
 8008dee:	42bb      	cmp	r3, r7
 8008df0:	460d      	mov	r5, r1
 8008df2:	d9f4      	bls.n	8008dde <_printf_i+0x112>
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d10b      	bne.n	8008e10 <_printf_i+0x144>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	07df      	lsls	r7, r3, #31
 8008dfc:	d508      	bpl.n	8008e10 <_printf_i+0x144>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	6861      	ldr	r1, [r4, #4]
 8008e02:	4299      	cmp	r1, r3
 8008e04:	bfde      	ittt	le
 8008e06:	2330      	movle	r3, #48	@ 0x30
 8008e08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e10:	1b92      	subs	r2, r2, r6
 8008e12:	6122      	str	r2, [r4, #16]
 8008e14:	f8cd a000 	str.w	sl, [sp]
 8008e18:	464b      	mov	r3, r9
 8008e1a:	aa03      	add	r2, sp, #12
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4640      	mov	r0, r8
 8008e20:	f7ff fee6 	bl	8008bf0 <_printf_common>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d14a      	bne.n	8008ebe <_printf_i+0x1f2>
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	b004      	add	sp, #16
 8008e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	f043 0320 	orr.w	r3, r3, #32
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	4833      	ldr	r0, [pc, #204]	@ (8008f08 <_printf_i+0x23c>)
 8008e3c:	2778      	movs	r7, #120	@ 0x78
 8008e3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	6831      	ldr	r1, [r6, #0]
 8008e46:	061f      	lsls	r7, r3, #24
 8008e48:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e4c:	d402      	bmi.n	8008e54 <_printf_i+0x188>
 8008e4e:	065f      	lsls	r7, r3, #25
 8008e50:	bf48      	it	mi
 8008e52:	b2ad      	uxthmi	r5, r5
 8008e54:	6031      	str	r1, [r6, #0]
 8008e56:	07d9      	lsls	r1, r3, #31
 8008e58:	bf44      	itt	mi
 8008e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e5e:	6023      	strmi	r3, [r4, #0]
 8008e60:	b11d      	cbz	r5, 8008e6a <_printf_i+0x19e>
 8008e62:	2310      	movs	r3, #16
 8008e64:	e7ac      	b.n	8008dc0 <_printf_i+0xf4>
 8008e66:	4827      	ldr	r0, [pc, #156]	@ (8008f04 <_printf_i+0x238>)
 8008e68:	e7e9      	b.n	8008e3e <_printf_i+0x172>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	f023 0320 	bic.w	r3, r3, #32
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	e7f6      	b.n	8008e62 <_printf_i+0x196>
 8008e74:	4616      	mov	r6, r2
 8008e76:	e7bd      	b.n	8008df4 <_printf_i+0x128>
 8008e78:	6833      	ldr	r3, [r6, #0]
 8008e7a:	6825      	ldr	r5, [r4, #0]
 8008e7c:	6961      	ldr	r1, [r4, #20]
 8008e7e:	1d18      	adds	r0, r3, #4
 8008e80:	6030      	str	r0, [r6, #0]
 8008e82:	062e      	lsls	r6, r5, #24
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	d501      	bpl.n	8008e8c <_printf_i+0x1c0>
 8008e88:	6019      	str	r1, [r3, #0]
 8008e8a:	e002      	b.n	8008e92 <_printf_i+0x1c6>
 8008e8c:	0668      	lsls	r0, r5, #25
 8008e8e:	d5fb      	bpl.n	8008e88 <_printf_i+0x1bc>
 8008e90:	8019      	strh	r1, [r3, #0]
 8008e92:	2300      	movs	r3, #0
 8008e94:	6123      	str	r3, [r4, #16]
 8008e96:	4616      	mov	r6, r2
 8008e98:	e7bc      	b.n	8008e14 <_printf_i+0x148>
 8008e9a:	6833      	ldr	r3, [r6, #0]
 8008e9c:	1d1a      	adds	r2, r3, #4
 8008e9e:	6032      	str	r2, [r6, #0]
 8008ea0:	681e      	ldr	r6, [r3, #0]
 8008ea2:	6862      	ldr	r2, [r4, #4]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7f7 f99a 	bl	80001e0 <memchr>
 8008eac:	b108      	cbz	r0, 8008eb2 <_printf_i+0x1e6>
 8008eae:	1b80      	subs	r0, r0, r6
 8008eb0:	6060      	str	r0, [r4, #4]
 8008eb2:	6863      	ldr	r3, [r4, #4]
 8008eb4:	6123      	str	r3, [r4, #16]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ebc:	e7aa      	b.n	8008e14 <_printf_i+0x148>
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	47d0      	blx	sl
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d0ad      	beq.n	8008e28 <_printf_i+0x15c>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	079b      	lsls	r3, r3, #30
 8008ed0:	d413      	bmi.n	8008efa <_printf_i+0x22e>
 8008ed2:	68e0      	ldr	r0, [r4, #12]
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	4298      	cmp	r0, r3
 8008ed8:	bfb8      	it	lt
 8008eda:	4618      	movlt	r0, r3
 8008edc:	e7a6      	b.n	8008e2c <_printf_i+0x160>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	47d0      	blx	sl
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d09d      	beq.n	8008e28 <_printf_i+0x15c>
 8008eec:	3501      	adds	r5, #1
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	9903      	ldr	r1, [sp, #12]
 8008ef2:	1a5b      	subs	r3, r3, r1
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dcf2      	bgt.n	8008ede <_printf_i+0x212>
 8008ef8:	e7eb      	b.n	8008ed2 <_printf_i+0x206>
 8008efa:	2500      	movs	r5, #0
 8008efc:	f104 0619 	add.w	r6, r4, #25
 8008f00:	e7f5      	b.n	8008eee <_printf_i+0x222>
 8008f02:	bf00      	nop
 8008f04:	08009099 	.word	0x08009099
 8008f08:	080090aa 	.word	0x080090aa

08008f0c <memmove>:
 8008f0c:	4288      	cmp	r0, r1
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	eb01 0402 	add.w	r4, r1, r2
 8008f14:	d902      	bls.n	8008f1c <memmove+0x10>
 8008f16:	4284      	cmp	r4, r0
 8008f18:	4623      	mov	r3, r4
 8008f1a:	d807      	bhi.n	8008f2c <memmove+0x20>
 8008f1c:	1e43      	subs	r3, r0, #1
 8008f1e:	42a1      	cmp	r1, r4
 8008f20:	d008      	beq.n	8008f34 <memmove+0x28>
 8008f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f2a:	e7f8      	b.n	8008f1e <memmove+0x12>
 8008f2c:	4402      	add	r2, r0
 8008f2e:	4601      	mov	r1, r0
 8008f30:	428a      	cmp	r2, r1
 8008f32:	d100      	bne.n	8008f36 <memmove+0x2a>
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f3e:	e7f7      	b.n	8008f30 <memmove+0x24>

08008f40 <_sbrk_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d06      	ldr	r5, [pc, #24]	@ (8008f5c <_sbrk_r+0x1c>)
 8008f44:	2300      	movs	r3, #0
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	f7f7 fe62 	bl	8000c14 <_sbrk>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_sbrk_r+0x1a>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_sbrk_r+0x1a>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	20000e1c 	.word	0x20000e1c

08008f60 <memcpy>:
 8008f60:	440a      	add	r2, r1
 8008f62:	4291      	cmp	r1, r2
 8008f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f68:	d100      	bne.n	8008f6c <memcpy+0xc>
 8008f6a:	4770      	bx	lr
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f76:	4291      	cmp	r1, r2
 8008f78:	d1f9      	bne.n	8008f6e <memcpy+0xe>
 8008f7a:	bd10      	pop	{r4, pc}

08008f7c <_realloc_r>:
 8008f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f80:	4680      	mov	r8, r0
 8008f82:	4615      	mov	r5, r2
 8008f84:	460c      	mov	r4, r1
 8008f86:	b921      	cbnz	r1, 8008f92 <_realloc_r+0x16>
 8008f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	f7ff bc4b 	b.w	8008828 <_malloc_r>
 8008f92:	b92a      	cbnz	r2, 8008fa0 <_realloc_r+0x24>
 8008f94:	f7ff fbdc 	bl	8008750 <_free_r>
 8008f98:	2400      	movs	r4, #0
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa0:	f000 f81a 	bl	8008fd8 <_malloc_usable_size_r>
 8008fa4:	4285      	cmp	r5, r0
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	d802      	bhi.n	8008fb0 <_realloc_r+0x34>
 8008faa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fae:	d8f4      	bhi.n	8008f9a <_realloc_r+0x1e>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	f7ff fc38 	bl	8008828 <_malloc_r>
 8008fb8:	4607      	mov	r7, r0
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d0ec      	beq.n	8008f98 <_realloc_r+0x1c>
 8008fbe:	42b5      	cmp	r5, r6
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	bf28      	it	cs
 8008fc6:	4632      	movcs	r2, r6
 8008fc8:	f7ff ffca 	bl	8008f60 <memcpy>
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f7ff fbbe 	bl	8008750 <_free_r>
 8008fd4:	463c      	mov	r4, r7
 8008fd6:	e7e0      	b.n	8008f9a <_realloc_r+0x1e>

08008fd8 <_malloc_usable_size_r>:
 8008fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fdc:	1f18      	subs	r0, r3, #4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bfbc      	itt	lt
 8008fe2:	580b      	ldrlt	r3, [r1, r0]
 8008fe4:	18c0      	addlt	r0, r0, r3
 8008fe6:	4770      	bx	lr

08008fe8 <_init>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	bf00      	nop
 8008fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fee:	bc08      	pop	{r3}
 8008ff0:	469e      	mov	lr, r3
 8008ff2:	4770      	bx	lr

08008ff4 <_fini>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr
